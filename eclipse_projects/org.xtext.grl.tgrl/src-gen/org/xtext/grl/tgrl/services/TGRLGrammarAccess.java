/*
* generated by Xtext
*/
package org.xtext.grl.tgrl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class TGRLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cGRLspecificationsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cGRLspecificationsGRLSpecificationParserRuleCall_0 = (RuleCall)cGRLspecificationsAssignment.eContents().get(0);
		
		//Model:
		//	gRLspecifications+=GRLSpecification*;
		public ParserRule getRule() { return rule; }

		//gRLspecifications+=GRLSpecification*
		public Assignment getGRLspecificationsAssignment() { return cGRLspecificationsAssignment; }

		//GRLSpecification
		public RuleCall getGRLspecificationsGRLSpecificationParserRuleCall_0() { return cGRLspecificationsGRLSpecificationParserRuleCall_0; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGRLSpecificationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGRLBaseElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Element:
		//	GRLSpecification | GRLBaseElement;
		public ParserRule getRule() { return rule; }

		//GRLSpecification | GRLBaseElement
		public Alternatives getAlternatives() { return cAlternatives; }

		//GRLSpecification
		public RuleCall getGRLSpecificationParserRuleCall_0() { return cGRLSpecificationParserRuleCall_0; }

		//GRLBaseElement
		public RuleCall getGRLBaseElementParserRuleCall_1() { return cGRLBaseElementParserRuleCall_1; }
	}

	public class GRLBaseElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GRLBaseElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGRLElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMappingParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInLineElementLinkParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//GRLBaseElement:
		//	GRLElement | Mapping | InLineElementLink;
		public ParserRule getRule() { return rule; }

		//GRLElement | Mapping | InLineElementLink
		public Alternatives getAlternatives() { return cAlternatives; }

		//GRLElement
		public RuleCall getGRLElementParserRuleCall_0() { return cGRLElementParserRuleCall_0; }

		//Mapping
		public RuleCall getMappingParserRuleCall_1() { return cMappingParserRuleCall_1; }

		//InLineElementLink
		public RuleCall getInLineElementLinkParserRuleCall_2() { return cInLineElementLinkParserRuleCall_2; }
	}

	public class GRLElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GRLElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSuperIntentionalElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNormalElementLinkParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cActorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStrategyGroupParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cIndicatorGroupParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cEvaluationStrategyParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cEvaluationParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cContributionGroupParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cContributionContextParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cQualitativeMappingParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cMetadataParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cCommentParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cLinkTypeParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		
		//GRLElement:
		//	SuperIntentionalElement | NormalElementLink | Actor | StrategyGroup | IndicatorGroup | EvaluationStrategy |
		//	Evaluation | ContributionGroup | ContributionContext | QualitativeMapping | Metadata | Comment | LinkType;
		public ParserRule getRule() { return rule; }

		//SuperIntentionalElement | NormalElementLink | Actor | StrategyGroup | IndicatorGroup | EvaluationStrategy | Evaluation |
		//ContributionGroup | ContributionContext | QualitativeMapping | Metadata | Comment | LinkType
		public Alternatives getAlternatives() { return cAlternatives; }

		//SuperIntentionalElement
		public RuleCall getSuperIntentionalElementParserRuleCall_0() { return cSuperIntentionalElementParserRuleCall_0; }

		//NormalElementLink
		public RuleCall getNormalElementLinkParserRuleCall_1() { return cNormalElementLinkParserRuleCall_1; }

		//Actor
		public RuleCall getActorParserRuleCall_2() { return cActorParserRuleCall_2; }

		//StrategyGroup
		public RuleCall getStrategyGroupParserRuleCall_3() { return cStrategyGroupParserRuleCall_3; }

		//IndicatorGroup
		public RuleCall getIndicatorGroupParserRuleCall_4() { return cIndicatorGroupParserRuleCall_4; }

		//EvaluationStrategy
		public RuleCall getEvaluationStrategyParserRuleCall_5() { return cEvaluationStrategyParserRuleCall_5; }

		//Evaluation
		public RuleCall getEvaluationParserRuleCall_6() { return cEvaluationParserRuleCall_6; }

		//ContributionGroup
		public RuleCall getContributionGroupParserRuleCall_7() { return cContributionGroupParserRuleCall_7; }

		//ContributionContext
		public RuleCall getContributionContextParserRuleCall_8() { return cContributionContextParserRuleCall_8; }

		//QualitativeMapping
		public RuleCall getQualitativeMappingParserRuleCall_9() { return cQualitativeMappingParserRuleCall_9; }

		//Metadata
		public RuleCall getMetadataParserRuleCall_10() { return cMetadataParserRuleCall_10; }

		//Comment
		public RuleCall getCommentParserRuleCall_11() { return cCommentParserRuleCall_11; }

		//LinkType
		public RuleCall getLinkTypeParserRuleCall_12() { return cLinkTypeParserRuleCall_12; }
	}

	public class SuperIntentionalElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SuperIntentionalElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntentionalElementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBeliefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SuperIntentionalElement:
		//	IntentionalElement | Belief;
		public ParserRule getRule() { return rule; }

		//IntentionalElement | Belief
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntentionalElement
		public RuleCall getIntentionalElementParserRuleCall_0() { return cIntentionalElementParserRuleCall_0; }

		//Belief
		public RuleCall getBeliefParserRuleCall_1() { return cBeliefParserRuleCall_1; }
	}

	public class IntentionalElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntentionalElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSoftgoalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGoalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTaskParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cResourceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cIndicatorParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//IntentionalElement:
		//	Softgoal | Goal | Task | Resource | Indicator;
		public ParserRule getRule() { return rule; }

		//Softgoal | Goal | Task | Resource | Indicator
		public Alternatives getAlternatives() { return cAlternatives; }

		//Softgoal
		public RuleCall getSoftgoalParserRuleCall_0() { return cSoftgoalParserRuleCall_0; }

		//Goal
		public RuleCall getGoalParserRuleCall_1() { return cGoalParserRuleCall_1; }

		//Task
		public RuleCall getTaskParserRuleCall_2() { return cTaskParserRuleCall_2; }

		//Resource
		public RuleCall getResourceParserRuleCall_3() { return cResourceParserRuleCall_3; }

		//Indicator
		public RuleCall getIndicatorParserRuleCall_4() { return cIndicatorParserRuleCall_4; }
	}

	public class GRLSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GRLSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGRLSpecificationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGrlKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cGrlElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGrlElementsGRLElementParserRuleCall_4_0 = (RuleCall)cGrlElementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//GRLSpecification:
		//	{GRLSpecification} "grl" name=ID? "{" grlElements+=GRLElement* //		(
		//	//			(impactModel=ImpactModel)?
		//	//			(
		//	//				links+=ElementLink | actors+=Actor | intElements+=SuperIntentionalElement | 
		//	//				strategies+=EvaluationStrategy | contributionGroups+=ContributionContextGroup |
		//	//				contributionContexts+=ContributionContext | kpiConv+=KPIConversion	| kpiInformationElements+=KPIInformationElement |
		//	//				kpiModelLinks+=KPIModelLink | indicatorGroup+=IndicatorGroup
		//	//			)*	
		//	//		)
		//	"}";
		public ParserRule getRule() { return rule; }

		//{GRLSpecification} "grl" name=ID? "{" grlElements+=GRLElement* //		(
		////			(impactModel=ImpactModel)?
		////			(
		////				links+=ElementLink | actors+=Actor | intElements+=SuperIntentionalElement | 
		////				strategies+=EvaluationStrategy | contributionGroups+=ContributionContextGroup |
		////				contributionContexts+=ContributionContext | kpiConv+=KPIConversion	| kpiInformationElements+=KPIInformationElement |
		////				kpiModelLinks+=KPIModelLink | indicatorGroup+=IndicatorGroup
		////			)*	
		////		)
		//"}"
		public Group getGroup() { return cGroup; }

		//{GRLSpecification}
		public Action getGRLSpecificationAction_0() { return cGRLSpecificationAction_0; }

		//"grl"
		public Keyword getGrlKeyword_1() { return cGrlKeyword_1; }

		//name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//grlElements+=GRLElement*
		public Assignment getGrlElementsAssignment_4() { return cGrlElementsAssignment_4; }

		//GRLElement
		public RuleCall getGrlElementsGRLElementParserRuleCall_4_0() { return cGrlElementsGRLElementParserRuleCall_4_0; }

		////		(
		////			(impactModel=ImpactModel)?
		////			(
		////				links+=ElementLink | actors+=Actor | intElements+=SuperIntentionalElement | 
		////				strategies+=EvaluationStrategy | contributionGroups+=ContributionContextGroup |
		////				contributionContexts+=ContributionContext | kpiConv+=KPIConversion	| kpiInformationElements+=KPIInformationElement |
		////				kpiModelLinks+=KPIModelLink | indicatorGroup+=IndicatorGroup
		////			)*	
		////		)
		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Actor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2_1_1 = (UnorderedGroup)cGroup_2_1.eContents().get(1);
		private final Group cGroup_2_1_1_0 = (Group)cUnorderedGroup_2_1_1.eContents().get(0);
		private final Keyword cNameKeyword_2_1_1_0_0 = (Keyword)cGroup_2_1_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_1_0_1 = (Keyword)cGroup_2_1_1_0.eContents().get(1);
		private final Assignment cLabelAssignment_2_1_1_0_2 = (Assignment)cGroup_2_1_1_0.eContents().get(2);
		private final RuleCall cLabelSTRINGTerminalRuleCall_2_1_1_0_2_0 = (RuleCall)cLabelAssignment_2_1_1_0_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_0_3 = (Keyword)cGroup_2_1_1_0.eContents().get(3);
		private final Group cGroup_2_1_1_1 = (Group)cUnorderedGroup_2_1_1.eContents().get(1);
		private final Keyword cImportanceKeyword_2_1_1_1_0 = (Keyword)cGroup_2_1_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_1_1_1 = (Keyword)cGroup_2_1_1_1.eContents().get(1);
		private final Alternatives cAlternatives_2_1_1_1_2 = (Alternatives)cGroup_2_1_1_1.eContents().get(2);
		private final Assignment cImportanceAssignment_2_1_1_1_2_0 = (Assignment)cAlternatives_2_1_1_1_2.eContents().get(0);
		private final RuleCall cImportanceImportanceTypeEnumRuleCall_2_1_1_1_2_0_0 = (RuleCall)cImportanceAssignment_2_1_1_1_2_0.eContents().get(0);
		private final Assignment cImportanceQuantitativeAssignment_2_1_1_1_2_1 = (Assignment)cAlternatives_2_1_1_1_2.eContents().get(1);
		private final RuleCall cImportanceQuantitativeQUALITATIVEVALUETerminalRuleCall_2_1_1_1_2_1_0 = (RuleCall)cImportanceQuantitativeAssignment_2_1_1_1_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_1_3 = (Keyword)cGroup_2_1_1_1.eContents().get(3);
		private final Group cGroup_2_1_1_2 = (Group)cUnorderedGroup_2_1_1.eContents().get(2);
		private final Keyword cDescriptionKeyword_2_1_1_2_0 = (Keyword)cGroup_2_1_1_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_1_2_1 = (Keyword)cGroup_2_1_1_2.eContents().get(1);
		private final Assignment cDescriptionAssignment_2_1_1_2_2 = (Assignment)cGroup_2_1_1_2.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_1_1_2_2_0 = (RuleCall)cDescriptionAssignment_2_1_1_2_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_2_3 = (Keyword)cGroup_2_1_1_2.eContents().get(3);
		private final Assignment cMetaDataAssignment_2_1_1_3 = (Assignment)cUnorderedGroup_2_1_1.eContents().get(3);
		private final RuleCall cMetaDataMetadataParserRuleCall_2_1_1_3_0 = (RuleCall)cMetaDataAssignment_2_1_1_3.eContents().get(0);
		private final Group cGroup_2_1_1_4 = (Group)cUnorderedGroup_2_1_1.eContents().get(4);
		private final Keyword cColorKeyword_2_1_1_4_0 = (Keyword)cGroup_2_1_1_4.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_1_4_1 = (Keyword)cGroup_2_1_1_4.eContents().get(1);
		private final Assignment cFillColorAssignment_2_1_1_4_2 = (Assignment)cGroup_2_1_1_4.eContents().get(2);
		private final RuleCall cFillColorColorEnumRuleCall_2_1_1_4_2_0 = (RuleCall)cFillColorAssignment_2_1_1_4_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_4_3 = (Keyword)cGroup_2_1_1_4.eContents().get(3);
		private final Alternatives cAlternatives_2_1_1_5 = (Alternatives)cUnorderedGroup_2_1_1.eContents().get(5);
		private final Assignment cElemetsAssignment_2_1_1_5_0 = (Assignment)cAlternatives_2_1_1_5.eContents().get(0);
		private final RuleCall cElemetsSuperIntentionalElementParserRuleCall_2_1_1_5_0_0 = (RuleCall)cElemetsAssignment_2_1_1_5_0.eContents().get(0);
		private final Assignment cElemetsAssignment_2_1_1_5_1 = (Assignment)cAlternatives_2_1_1_5.eContents().get(1);
		private final RuleCall cElemetsNormalElementLinkParserRuleCall_2_1_1_5_1_0 = (RuleCall)cElemetsAssignment_2_1_1_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//// *************************************Actor******************************************
		//Actor:
		//	"actor" name=ID (";" | "{" (("name" "=" label=STRING ";")? / *
		//			 *TODO I must give a default value for importanceQuantitative, which is zero, to this attribute.
		//			 * 		This can be done through the post processing mechanism in xText 
		//			 * / & ("importance" "=" (importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE) ";")? & ("description"
		//	"=" description=STRING ";")? & metaData+=Metadata* & ("color" "=" fillColor=Color ";")? &
		//	(elemets+=SuperIntentionalElement | elemets+=NormalElementLink)*) "}");
		public ParserRule getRule() { return rule; }

		//"actor" name=ID (";" | "{" (("name" "=" label=STRING ";")? / *
		//			 *TODO I must give a default value for importanceQuantitative, which is zero, to this attribute.
		//			 * 		This can be done through the post processing mechanism in xText 
		//			 * / & ("importance" "=" (importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE) ";")? & ("description"
		//"=" description=STRING ";")? & metaData+=Metadata* & ("color" "=" fillColor=Color ";")? &
		//(elemets+=SuperIntentionalElement | elemets+=NormalElementLink)*) "}")
		public Group getGroup() { return cGroup; }

		//"actor"
		public Keyword getActorKeyword_0() { return cActorKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//";" | "{" (("name" "=" label=STRING ";")? / *
		//			 *TODO I must give a default value for importanceQuantitative, which is zero, to this attribute.
		//			 * 		This can be done through the post processing mechanism in xText 
		//			 * / & ("importance" "=" (importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE) ";")? & ("description"
		//"=" description=STRING ";")? & metaData+=Metadata* & ("color" "=" fillColor=Color ";")? &
		//(elemets+=SuperIntentionalElement | elemets+=NormalElementLink)*) "}"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//";"
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }

		//"{" (("name" "=" label=STRING ";")? / *
		//			 *TODO I must give a default value for importanceQuantitative, which is zero, to this attribute.
		//			 * 		This can be done through the post processing mechanism in xText 
		//			 * / & ("importance" "=" (importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE) ";")? & ("description"
		//"=" description=STRING ";")? & metaData+=Metadata* & ("color" "=" fillColor=Color ";")? &
		//(elemets+=SuperIntentionalElement | elemets+=NormalElementLink)*) "}"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }

		//("name" "=" label=STRING ";")? / *
		//			 *TODO I must give a default value for importanceQuantitative, which is zero, to this attribute.
		//			 * 		This can be done through the post processing mechanism in xText 
		//			 * / & ("importance" "=" (importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE) ";")? & ("description"
		//"=" description=STRING ";")? & metaData+=Metadata* & ("color" "=" fillColor=Color ";")? &
		//(elemets+=SuperIntentionalElement | elemets+=NormalElementLink)*
		public UnorderedGroup getUnorderedGroup_2_1_1() { return cUnorderedGroup_2_1_1; }

		//("name" "=" label=STRING ";")?
		public Group getGroup_2_1_1_0() { return cGroup_2_1_1_0; }

		//"name"
		public Keyword getNameKeyword_2_1_1_0_0() { return cNameKeyword_2_1_1_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_1_0_1() { return cEqualsSignKeyword_2_1_1_0_1; }

		//label=STRING
		public Assignment getLabelAssignment_2_1_1_0_2() { return cLabelAssignment_2_1_1_0_2; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_2_1_1_0_2_0() { return cLabelSTRINGTerminalRuleCall_2_1_1_0_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1_0_3() { return cSemicolonKeyword_2_1_1_0_3; }

		//("importance" "=" (importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE) ";")?
		public Group getGroup_2_1_1_1() { return cGroup_2_1_1_1; }

		//"importance"
		public Keyword getImportanceKeyword_2_1_1_1_0() { return cImportanceKeyword_2_1_1_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_1_1_1() { return cEqualsSignKeyword_2_1_1_1_1; }

		//importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE
		public Alternatives getAlternatives_2_1_1_1_2() { return cAlternatives_2_1_1_1_2; }

		//importance=ImportanceType
		public Assignment getImportanceAssignment_2_1_1_1_2_0() { return cImportanceAssignment_2_1_1_1_2_0; }

		//ImportanceType
		public RuleCall getImportanceImportanceTypeEnumRuleCall_2_1_1_1_2_0_0() { return cImportanceImportanceTypeEnumRuleCall_2_1_1_1_2_0_0; }

		//importanceQuantitative=QUALITATIVEVALUE
		public Assignment getImportanceQuantitativeAssignment_2_1_1_1_2_1() { return cImportanceQuantitativeAssignment_2_1_1_1_2_1; }

		//QUALITATIVEVALUE
		public RuleCall getImportanceQuantitativeQUALITATIVEVALUETerminalRuleCall_2_1_1_1_2_1_0() { return cImportanceQuantitativeQUALITATIVEVALUETerminalRuleCall_2_1_1_1_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1_1_3() { return cSemicolonKeyword_2_1_1_1_3; }

		//("description" "=" description=STRING ";")?
		public Group getGroup_2_1_1_2() { return cGroup_2_1_1_2; }

		//"description"
		public Keyword getDescriptionKeyword_2_1_1_2_0() { return cDescriptionKeyword_2_1_1_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_1_2_1() { return cEqualsSignKeyword_2_1_1_2_1; }

		//description=STRING
		public Assignment getDescriptionAssignment_2_1_1_2_2() { return cDescriptionAssignment_2_1_1_2_2; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_1_1_2_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_1_1_2_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1_2_3() { return cSemicolonKeyword_2_1_1_2_3; }

		//metaData+=Metadata*
		public Assignment getMetaDataAssignment_2_1_1_3() { return cMetaDataAssignment_2_1_1_3; }

		//Metadata
		public RuleCall getMetaDataMetadataParserRuleCall_2_1_1_3_0() { return cMetaDataMetadataParserRuleCall_2_1_1_3_0; }

		//("color" "=" fillColor=Color ";")?
		public Group getGroup_2_1_1_4() { return cGroup_2_1_1_4; }

		//"color"
		public Keyword getColorKeyword_2_1_1_4_0() { return cColorKeyword_2_1_1_4_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_1_4_1() { return cEqualsSignKeyword_2_1_1_4_1; }

		//fillColor=Color
		public Assignment getFillColorAssignment_2_1_1_4_2() { return cFillColorAssignment_2_1_1_4_2; }

		//Color
		public RuleCall getFillColorColorEnumRuleCall_2_1_1_4_2_0() { return cFillColorColorEnumRuleCall_2_1_1_4_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1_4_3() { return cSemicolonKeyword_2_1_1_4_3; }

		//(elemets+=SuperIntentionalElement | elemets+=NormalElementLink)*
		public Alternatives getAlternatives_2_1_1_5() { return cAlternatives_2_1_1_5; }

		//elemets+=SuperIntentionalElement
		public Assignment getElemetsAssignment_2_1_1_5_0() { return cElemetsAssignment_2_1_1_5_0; }

		//SuperIntentionalElement
		public RuleCall getElemetsSuperIntentionalElementParserRuleCall_2_1_1_5_0_0() { return cElemetsSuperIntentionalElementParserRuleCall_2_1_1_5_0_0; }

		//elemets+=NormalElementLink
		public Assignment getElemetsAssignment_2_1_1_5_1() { return cElemetsAssignment_2_1_1_5_1; }

		//NormalElementLink
		public RuleCall getElemetsNormalElementLinkParserRuleCall_2_1_1_5_1_0() { return cElemetsNormalElementLinkParserRuleCall_2_1_1_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}

	public class SoftgoalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Softgoal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSoftGoalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2_1_1 = (UnorderedGroup)cGroup_2_1.eContents().get(1);
		private final Group cGroup_2_1_1_0 = (Group)cUnorderedGroup_2_1_1.eContents().get(0);
		private final Keyword cNameKeyword_2_1_1_0_0 = (Keyword)cGroup_2_1_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_1_0_1 = (Keyword)cGroup_2_1_1_0.eContents().get(1);
		private final Assignment cLabelAssignment_2_1_1_0_2 = (Assignment)cGroup_2_1_1_0.eContents().get(2);
		private final RuleCall cLabelSTRINGTerminalRuleCall_2_1_1_0_2_0 = (RuleCall)cLabelAssignment_2_1_1_0_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_0_3 = (Keyword)cGroup_2_1_1_0.eContents().get(3);
		private final Group cGroup_2_1_1_1 = (Group)cUnorderedGroup_2_1_1.eContents().get(1);
		private final Keyword cDescriptionKeyword_2_1_1_1_0 = (Keyword)cGroup_2_1_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_1_1_1 = (Keyword)cGroup_2_1_1_1.eContents().get(1);
		private final Assignment cDescriptionAssignment_2_1_1_1_2 = (Assignment)cGroup_2_1_1_1.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_1_1_1_2_0 = (RuleCall)cDescriptionAssignment_2_1_1_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_1_3 = (Keyword)cGroup_2_1_1_1.eContents().get(3);
		private final Group cGroup_2_1_1_2 = (Group)cUnorderedGroup_2_1_1.eContents().get(2);
		private final Keyword cDecompositionTypeKeyword_2_1_1_2_0 = (Keyword)cGroup_2_1_1_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_1_2_1 = (Keyword)cGroup_2_1_1_2.eContents().get(1);
		private final Assignment cDecompositionTypeAssignment_2_1_1_2_2 = (Assignment)cGroup_2_1_1_2.eContents().get(2);
		private final RuleCall cDecompositionTypeDecompositionTypeEnumRuleCall_2_1_1_2_2_0 = (RuleCall)cDecompositionTypeAssignment_2_1_1_2_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_2_3 = (Keyword)cGroup_2_1_1_2.eContents().get(3);
		private final Group cGroup_2_1_1_3 = (Group)cUnorderedGroup_2_1_1.eContents().get(3);
		private final Keyword cImportanceKeyword_2_1_1_3_0 = (Keyword)cGroup_2_1_1_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_1_3_1 = (Keyword)cGroup_2_1_1_3.eContents().get(1);
		private final Alternatives cAlternatives_2_1_1_3_2 = (Alternatives)cGroup_2_1_1_3.eContents().get(2);
		private final Assignment cImportanceAssignment_2_1_1_3_2_0 = (Assignment)cAlternatives_2_1_1_3_2.eContents().get(0);
		private final RuleCall cImportanceImportanceTypeEnumRuleCall_2_1_1_3_2_0_0 = (RuleCall)cImportanceAssignment_2_1_1_3_2_0.eContents().get(0);
		private final Assignment cImportanceQuantitativeAssignment_2_1_1_3_2_1 = (Assignment)cAlternatives_2_1_1_3_2.eContents().get(1);
		private final RuleCall cImportanceQuantitativeQUALITATIVEVALUETerminalRuleCall_2_1_1_3_2_1_0 = (RuleCall)cImportanceQuantitativeAssignment_2_1_1_3_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_3_3 = (Keyword)cGroup_2_1_1_3.eContents().get(3);
		private final Assignment cMetaDataAssignment_2_1_1_4 = (Assignment)cUnorderedGroup_2_1_1.eContents().get(4);
		private final RuleCall cMetaDataMetadataParserRuleCall_2_1_1_4_0 = (RuleCall)cMetaDataAssignment_2_1_1_4.eContents().get(0);
		private final Group cGroup_2_1_1_5 = (Group)cUnorderedGroup_2_1_1.eContents().get(5);
		private final Keyword cColorKeyword_2_1_1_5_0 = (Keyword)cGroup_2_1_1_5.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_1_5_1 = (Keyword)cGroup_2_1_1_5.eContents().get(1);
		private final Assignment cFillColorAssignment_2_1_1_5_2 = (Assignment)cGroup_2_1_1_5.eContents().get(2);
		private final RuleCall cFillColorColorEnumRuleCall_2_1_1_5_2_0 = (RuleCall)cFillColorAssignment_2_1_1_5_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_5_3 = (Keyword)cGroup_2_1_1_5.eContents().get(3);
		private final Assignment cElementLinksAssignment_2_1_1_6 = (Assignment)cUnorderedGroup_2_1_1.eContents().get(6);
		private final RuleCall cElementLinksInLineElementLinkParserRuleCall_2_1_1_6_0 = (RuleCall)cElementLinksAssignment_2_1_1_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//// *************************************IntentionalElement******************************************
		//Softgoal:
		//	"softGoal" name=ID (";" | "{" (("name" "=" label=STRING ";")? / *
		//				 *TODO I must give a default value for importanceQuantitative, which is zero, to this attribute.
		//				 * 		This can be done through the post processing mechanism in xText 
		//				 * / & ("description" "=" description=STRING ";")? & ("decompositionType" "=" decompositionType=DecompositionType
		//	";")? & ("importance" "=" (importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE) ";")? &
		//	metaData+=Metadata* & ("color" "=" fillColor=Color ";")? & elementLinks+=InLineElementLink*) "}");
		public ParserRule getRule() { return rule; }

		//"softGoal" name=ID (";" | "{" (("name" "=" label=STRING ";")? / *
		//				 *TODO I must give a default value for importanceQuantitative, which is zero, to this attribute.
		//				 * 		This can be done through the post processing mechanism in xText 
		//				 * / & ("description" "=" description=STRING ";")? & ("decompositionType" "=" decompositionType=DecompositionType
		//";")? & ("importance" "=" (importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE) ";")? &
		//metaData+=Metadata* & ("color" "=" fillColor=Color ";")? & elementLinks+=InLineElementLink*) "}")
		public Group getGroup() { return cGroup; }

		//"softGoal"
		public Keyword getSoftGoalKeyword_0() { return cSoftGoalKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//";" | "{" (("name" "=" label=STRING ";")? / *
		//				 *TODO I must give a default value for importanceQuantitative, which is zero, to this attribute.
		//				 * 		This can be done through the post processing mechanism in xText 
		//				 * / & ("description" "=" description=STRING ";")? & ("decompositionType" "=" decompositionType=DecompositionType
		//";")? & ("importance" "=" (importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE) ";")? &
		//metaData+=Metadata* & ("color" "=" fillColor=Color ";")? & elementLinks+=InLineElementLink*) "}"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//";"
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }

		//"{" (("name" "=" label=STRING ";")? / *
		//				 *TODO I must give a default value for importanceQuantitative, which is zero, to this attribute.
		//				 * 		This can be done through the post processing mechanism in xText 
		//				 * / & ("description" "=" description=STRING ";")? & ("decompositionType" "=" decompositionType=DecompositionType
		//";")? & ("importance" "=" (importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE) ";")? &
		//metaData+=Metadata* & ("color" "=" fillColor=Color ";")? & elementLinks+=InLineElementLink*) "}"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }

		//("name" "=" label=STRING ";")? / *
		//				 *TODO I must give a default value for importanceQuantitative, which is zero, to this attribute.
		//				 * 		This can be done through the post processing mechanism in xText 
		//				 * / & ("description" "=" description=STRING ";")? & ("decompositionType" "=" decompositionType=DecompositionType
		//";")? & ("importance" "=" (importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE) ";")? &
		//metaData+=Metadata* & ("color" "=" fillColor=Color ";")? & elementLinks+=InLineElementLink*
		public UnorderedGroup getUnorderedGroup_2_1_1() { return cUnorderedGroup_2_1_1; }

		//("name" "=" label=STRING ";")?
		public Group getGroup_2_1_1_0() { return cGroup_2_1_1_0; }

		//"name"
		public Keyword getNameKeyword_2_1_1_0_0() { return cNameKeyword_2_1_1_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_1_0_1() { return cEqualsSignKeyword_2_1_1_0_1; }

		//label=STRING
		public Assignment getLabelAssignment_2_1_1_0_2() { return cLabelAssignment_2_1_1_0_2; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_2_1_1_0_2_0() { return cLabelSTRINGTerminalRuleCall_2_1_1_0_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1_0_3() { return cSemicolonKeyword_2_1_1_0_3; }

		//("description" "=" description=STRING ";")?
		public Group getGroup_2_1_1_1() { return cGroup_2_1_1_1; }

		//"description"
		public Keyword getDescriptionKeyword_2_1_1_1_0() { return cDescriptionKeyword_2_1_1_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_1_1_1() { return cEqualsSignKeyword_2_1_1_1_1; }

		//description=STRING
		public Assignment getDescriptionAssignment_2_1_1_1_2() { return cDescriptionAssignment_2_1_1_1_2; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_1_1_1_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_1_1_1_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1_1_3() { return cSemicolonKeyword_2_1_1_1_3; }

		//("decompositionType" "=" decompositionType=DecompositionType ";")?
		public Group getGroup_2_1_1_2() { return cGroup_2_1_1_2; }

		//"decompositionType"
		public Keyword getDecompositionTypeKeyword_2_1_1_2_0() { return cDecompositionTypeKeyword_2_1_1_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_1_2_1() { return cEqualsSignKeyword_2_1_1_2_1; }

		//decompositionType=DecompositionType
		public Assignment getDecompositionTypeAssignment_2_1_1_2_2() { return cDecompositionTypeAssignment_2_1_1_2_2; }

		//DecompositionType
		public RuleCall getDecompositionTypeDecompositionTypeEnumRuleCall_2_1_1_2_2_0() { return cDecompositionTypeDecompositionTypeEnumRuleCall_2_1_1_2_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1_2_3() { return cSemicolonKeyword_2_1_1_2_3; }

		//("importance" "=" (importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE) ";")?
		public Group getGroup_2_1_1_3() { return cGroup_2_1_1_3; }

		//"importance"
		public Keyword getImportanceKeyword_2_1_1_3_0() { return cImportanceKeyword_2_1_1_3_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_1_3_1() { return cEqualsSignKeyword_2_1_1_3_1; }

		//importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE
		public Alternatives getAlternatives_2_1_1_3_2() { return cAlternatives_2_1_1_3_2; }

		//importance=ImportanceType
		public Assignment getImportanceAssignment_2_1_1_3_2_0() { return cImportanceAssignment_2_1_1_3_2_0; }

		//ImportanceType
		public RuleCall getImportanceImportanceTypeEnumRuleCall_2_1_1_3_2_0_0() { return cImportanceImportanceTypeEnumRuleCall_2_1_1_3_2_0_0; }

		//importanceQuantitative=QUALITATIVEVALUE
		public Assignment getImportanceQuantitativeAssignment_2_1_1_3_2_1() { return cImportanceQuantitativeAssignment_2_1_1_3_2_1; }

		//QUALITATIVEVALUE
		public RuleCall getImportanceQuantitativeQUALITATIVEVALUETerminalRuleCall_2_1_1_3_2_1_0() { return cImportanceQuantitativeQUALITATIVEVALUETerminalRuleCall_2_1_1_3_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1_3_3() { return cSemicolonKeyword_2_1_1_3_3; }

		//metaData+=Metadata*
		public Assignment getMetaDataAssignment_2_1_1_4() { return cMetaDataAssignment_2_1_1_4; }

		//Metadata
		public RuleCall getMetaDataMetadataParserRuleCall_2_1_1_4_0() { return cMetaDataMetadataParserRuleCall_2_1_1_4_0; }

		//("color" "=" fillColor=Color ";")?
		public Group getGroup_2_1_1_5() { return cGroup_2_1_1_5; }

		//"color"
		public Keyword getColorKeyword_2_1_1_5_0() { return cColorKeyword_2_1_1_5_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_1_5_1() { return cEqualsSignKeyword_2_1_1_5_1; }

		//fillColor=Color
		public Assignment getFillColorAssignment_2_1_1_5_2() { return cFillColorAssignment_2_1_1_5_2; }

		//Color
		public RuleCall getFillColorColorEnumRuleCall_2_1_1_5_2_0() { return cFillColorColorEnumRuleCall_2_1_1_5_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1_5_3() { return cSemicolonKeyword_2_1_1_5_3; }

		//elementLinks+=InLineElementLink*
		public Assignment getElementLinksAssignment_2_1_1_6() { return cElementLinksAssignment_2_1_1_6; }

		//InLineElementLink
		public RuleCall getElementLinksInLineElementLinkParserRuleCall_2_1_1_6_0() { return cElementLinksInLineElementLinkParserRuleCall_2_1_1_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}

	public class GoalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Goal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGoalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2_1_1 = (UnorderedGroup)cGroup_2_1.eContents().get(1);
		private final Group cGroup_2_1_1_0 = (Group)cUnorderedGroup_2_1_1.eContents().get(0);
		private final Keyword cNameKeyword_2_1_1_0_0 = (Keyword)cGroup_2_1_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_1_0_1 = (Keyword)cGroup_2_1_1_0.eContents().get(1);
		private final Assignment cLabelAssignment_2_1_1_0_2 = (Assignment)cGroup_2_1_1_0.eContents().get(2);
		private final RuleCall cLabelSTRINGTerminalRuleCall_2_1_1_0_2_0 = (RuleCall)cLabelAssignment_2_1_1_0_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_0_3 = (Keyword)cGroup_2_1_1_0.eContents().get(3);
		private final Group cGroup_2_1_1_1 = (Group)cUnorderedGroup_2_1_1.eContents().get(1);
		private final Keyword cDescriptionKeyword_2_1_1_1_0 = (Keyword)cGroup_2_1_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_1_1_1 = (Keyword)cGroup_2_1_1_1.eContents().get(1);
		private final Assignment cDescriptionAssignment_2_1_1_1_2 = (Assignment)cGroup_2_1_1_1.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_1_1_1_2_0 = (RuleCall)cDescriptionAssignment_2_1_1_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_1_3 = (Keyword)cGroup_2_1_1_1.eContents().get(3);
		private final Group cGroup_2_1_1_2 = (Group)cUnorderedGroup_2_1_1.eContents().get(2);
		private final Keyword cDecompositionTypeKeyword_2_1_1_2_0 = (Keyword)cGroup_2_1_1_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_1_2_1 = (Keyword)cGroup_2_1_1_2.eContents().get(1);
		private final Assignment cDecompositionTypeAssignment_2_1_1_2_2 = (Assignment)cGroup_2_1_1_2.eContents().get(2);
		private final RuleCall cDecompositionTypeDecompositionTypeEnumRuleCall_2_1_1_2_2_0 = (RuleCall)cDecompositionTypeAssignment_2_1_1_2_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_2_3 = (Keyword)cGroup_2_1_1_2.eContents().get(3);
		private final Group cGroup_2_1_1_3 = (Group)cUnorderedGroup_2_1_1.eContents().get(3);
		private final Keyword cImportanceKeyword_2_1_1_3_0 = (Keyword)cGroup_2_1_1_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_1_3_1 = (Keyword)cGroup_2_1_1_3.eContents().get(1);
		private final Alternatives cAlternatives_2_1_1_3_2 = (Alternatives)cGroup_2_1_1_3.eContents().get(2);
		private final Assignment cImportanceAssignment_2_1_1_3_2_0 = (Assignment)cAlternatives_2_1_1_3_2.eContents().get(0);
		private final RuleCall cImportanceImportanceTypeEnumRuleCall_2_1_1_3_2_0_0 = (RuleCall)cImportanceAssignment_2_1_1_3_2_0.eContents().get(0);
		private final Assignment cImportanceQuantitativeAssignment_2_1_1_3_2_1 = (Assignment)cAlternatives_2_1_1_3_2.eContents().get(1);
		private final RuleCall cImportanceQuantitativeQUALITATIVEVALUETerminalRuleCall_2_1_1_3_2_1_0 = (RuleCall)cImportanceQuantitativeAssignment_2_1_1_3_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_3_3 = (Keyword)cGroup_2_1_1_3.eContents().get(3);
		private final Assignment cMetaDataAssignment_2_1_1_4 = (Assignment)cUnorderedGroup_2_1_1.eContents().get(4);
		private final RuleCall cMetaDataMetadataParserRuleCall_2_1_1_4_0 = (RuleCall)cMetaDataAssignment_2_1_1_4.eContents().get(0);
		private final Group cGroup_2_1_1_5 = (Group)cUnorderedGroup_2_1_1.eContents().get(5);
		private final Keyword cColorKeyword_2_1_1_5_0 = (Keyword)cGroup_2_1_1_5.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_1_5_1 = (Keyword)cGroup_2_1_1_5.eContents().get(1);
		private final Assignment cFillColorAssignment_2_1_1_5_2 = (Assignment)cGroup_2_1_1_5.eContents().get(2);
		private final RuleCall cFillColorColorEnumRuleCall_2_1_1_5_2_0 = (RuleCall)cFillColorAssignment_2_1_1_5_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_5_3 = (Keyword)cGroup_2_1_1_5.eContents().get(3);
		private final Assignment cElementLinksAssignment_2_1_1_6 = (Assignment)cUnorderedGroup_2_1_1.eContents().get(6);
		private final RuleCall cElementLinksInLineElementLinkParserRuleCall_2_1_1_6_0 = (RuleCall)cElementLinksAssignment_2_1_1_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//Goal:
		//	"goal" name=ID (";" | "{" (("name" "=" label=STRING ";")? / *
		//			 *TODO I must give a default value for importanceQuantitative, which is zero, to this attribute.
		//			 * 		This can be done through the post processing mechanism in xText 
		//			 * / & ("description" "=" description=STRING ";")? & ("decompositionType" "=" decompositionType=DecompositionType
		//	";")? & ("importance" "=" (importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE) ";")? &
		//	metaData+=Metadata* & ("color" "=" fillColor=Color ";")? & elementLinks+=InLineElementLink*) "}");
		public ParserRule getRule() { return rule; }

		//"goal" name=ID (";" | "{" (("name" "=" label=STRING ";")? / *
		//			 *TODO I must give a default value for importanceQuantitative, which is zero, to this attribute.
		//			 * 		This can be done through the post processing mechanism in xText 
		//			 * / & ("description" "=" description=STRING ";")? & ("decompositionType" "=" decompositionType=DecompositionType
		//";")? & ("importance" "=" (importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE) ";")? &
		//metaData+=Metadata* & ("color" "=" fillColor=Color ";")? & elementLinks+=InLineElementLink*) "}")
		public Group getGroup() { return cGroup; }

		//"goal"
		public Keyword getGoalKeyword_0() { return cGoalKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//";" | "{" (("name" "=" label=STRING ";")? / *
		//			 *TODO I must give a default value for importanceQuantitative, which is zero, to this attribute.
		//			 * 		This can be done through the post processing mechanism in xText 
		//			 * / & ("description" "=" description=STRING ";")? & ("decompositionType" "=" decompositionType=DecompositionType
		//";")? & ("importance" "=" (importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE) ";")? &
		//metaData+=Metadata* & ("color" "=" fillColor=Color ";")? & elementLinks+=InLineElementLink*) "}"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//";"
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }

		//"{" (("name" "=" label=STRING ";")? / *
		//			 *TODO I must give a default value for importanceQuantitative, which is zero, to this attribute.
		//			 * 		This can be done through the post processing mechanism in xText 
		//			 * / & ("description" "=" description=STRING ";")? & ("decompositionType" "=" decompositionType=DecompositionType
		//";")? & ("importance" "=" (importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE) ";")? &
		//metaData+=Metadata* & ("color" "=" fillColor=Color ";")? & elementLinks+=InLineElementLink*) "}"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }

		//("name" "=" label=STRING ";")? / *
		//			 *TODO I must give a default value for importanceQuantitative, which is zero, to this attribute.
		//			 * 		This can be done through the post processing mechanism in xText 
		//			 * / & ("description" "=" description=STRING ";")? & ("decompositionType" "=" decompositionType=DecompositionType
		//";")? & ("importance" "=" (importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE) ";")? &
		//metaData+=Metadata* & ("color" "=" fillColor=Color ";")? & elementLinks+=InLineElementLink*
		public UnorderedGroup getUnorderedGroup_2_1_1() { return cUnorderedGroup_2_1_1; }

		//("name" "=" label=STRING ";")?
		public Group getGroup_2_1_1_0() { return cGroup_2_1_1_0; }

		//"name"
		public Keyword getNameKeyword_2_1_1_0_0() { return cNameKeyword_2_1_1_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_1_0_1() { return cEqualsSignKeyword_2_1_1_0_1; }

		//label=STRING
		public Assignment getLabelAssignment_2_1_1_0_2() { return cLabelAssignment_2_1_1_0_2; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_2_1_1_0_2_0() { return cLabelSTRINGTerminalRuleCall_2_1_1_0_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1_0_3() { return cSemicolonKeyword_2_1_1_0_3; }

		//("description" "=" description=STRING ";")?
		public Group getGroup_2_1_1_1() { return cGroup_2_1_1_1; }

		//"description"
		public Keyword getDescriptionKeyword_2_1_1_1_0() { return cDescriptionKeyword_2_1_1_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_1_1_1() { return cEqualsSignKeyword_2_1_1_1_1; }

		//description=STRING
		public Assignment getDescriptionAssignment_2_1_1_1_2() { return cDescriptionAssignment_2_1_1_1_2; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_1_1_1_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_1_1_1_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1_1_3() { return cSemicolonKeyword_2_1_1_1_3; }

		//("decompositionType" "=" decompositionType=DecompositionType ";")?
		public Group getGroup_2_1_1_2() { return cGroup_2_1_1_2; }

		//"decompositionType"
		public Keyword getDecompositionTypeKeyword_2_1_1_2_0() { return cDecompositionTypeKeyword_2_1_1_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_1_2_1() { return cEqualsSignKeyword_2_1_1_2_1; }

		//decompositionType=DecompositionType
		public Assignment getDecompositionTypeAssignment_2_1_1_2_2() { return cDecompositionTypeAssignment_2_1_1_2_2; }

		//DecompositionType
		public RuleCall getDecompositionTypeDecompositionTypeEnumRuleCall_2_1_1_2_2_0() { return cDecompositionTypeDecompositionTypeEnumRuleCall_2_1_1_2_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1_2_3() { return cSemicolonKeyword_2_1_1_2_3; }

		//("importance" "=" (importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE) ";")?
		public Group getGroup_2_1_1_3() { return cGroup_2_1_1_3; }

		//"importance"
		public Keyword getImportanceKeyword_2_1_1_3_0() { return cImportanceKeyword_2_1_1_3_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_1_3_1() { return cEqualsSignKeyword_2_1_1_3_1; }

		//importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE
		public Alternatives getAlternatives_2_1_1_3_2() { return cAlternatives_2_1_1_3_2; }

		//importance=ImportanceType
		public Assignment getImportanceAssignment_2_1_1_3_2_0() { return cImportanceAssignment_2_1_1_3_2_0; }

		//ImportanceType
		public RuleCall getImportanceImportanceTypeEnumRuleCall_2_1_1_3_2_0_0() { return cImportanceImportanceTypeEnumRuleCall_2_1_1_3_2_0_0; }

		//importanceQuantitative=QUALITATIVEVALUE
		public Assignment getImportanceQuantitativeAssignment_2_1_1_3_2_1() { return cImportanceQuantitativeAssignment_2_1_1_3_2_1; }

		//QUALITATIVEVALUE
		public RuleCall getImportanceQuantitativeQUALITATIVEVALUETerminalRuleCall_2_1_1_3_2_1_0() { return cImportanceQuantitativeQUALITATIVEVALUETerminalRuleCall_2_1_1_3_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1_3_3() { return cSemicolonKeyword_2_1_1_3_3; }

		//metaData+=Metadata*
		public Assignment getMetaDataAssignment_2_1_1_4() { return cMetaDataAssignment_2_1_1_4; }

		//Metadata
		public RuleCall getMetaDataMetadataParserRuleCall_2_1_1_4_0() { return cMetaDataMetadataParserRuleCall_2_1_1_4_0; }

		//("color" "=" fillColor=Color ";")?
		public Group getGroup_2_1_1_5() { return cGroup_2_1_1_5; }

		//"color"
		public Keyword getColorKeyword_2_1_1_5_0() { return cColorKeyword_2_1_1_5_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_1_5_1() { return cEqualsSignKeyword_2_1_1_5_1; }

		//fillColor=Color
		public Assignment getFillColorAssignment_2_1_1_5_2() { return cFillColorAssignment_2_1_1_5_2; }

		//Color
		public RuleCall getFillColorColorEnumRuleCall_2_1_1_5_2_0() { return cFillColorColorEnumRuleCall_2_1_1_5_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1_5_3() { return cSemicolonKeyword_2_1_1_5_3; }

		//elementLinks+=InLineElementLink*
		public Assignment getElementLinksAssignment_2_1_1_6() { return cElementLinksAssignment_2_1_1_6; }

		//InLineElementLink
		public RuleCall getElementLinksInLineElementLinkParserRuleCall_2_1_1_6_0() { return cElementLinksInLineElementLinkParserRuleCall_2_1_1_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}

	public class TaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Task");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2_1_1 = (UnorderedGroup)cGroup_2_1.eContents().get(1);
		private final Group cGroup_2_1_1_0 = (Group)cUnorderedGroup_2_1_1.eContents().get(0);
		private final Keyword cNameKeyword_2_1_1_0_0 = (Keyword)cGroup_2_1_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_1_0_1 = (Keyword)cGroup_2_1_1_0.eContents().get(1);
		private final Assignment cLabelAssignment_2_1_1_0_2 = (Assignment)cGroup_2_1_1_0.eContents().get(2);
		private final RuleCall cLabelSTRINGTerminalRuleCall_2_1_1_0_2_0 = (RuleCall)cLabelAssignment_2_1_1_0_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_0_3 = (Keyword)cGroup_2_1_1_0.eContents().get(3);
		private final Group cGroup_2_1_1_1 = (Group)cUnorderedGroup_2_1_1.eContents().get(1);
		private final Keyword cDescriptionKeyword_2_1_1_1_0 = (Keyword)cGroup_2_1_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_1_1_1 = (Keyword)cGroup_2_1_1_1.eContents().get(1);
		private final Assignment cDescriptionAssignment_2_1_1_1_2 = (Assignment)cGroup_2_1_1_1.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_1_1_1_2_0 = (RuleCall)cDescriptionAssignment_2_1_1_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_1_3 = (Keyword)cGroup_2_1_1_1.eContents().get(3);
		private final Group cGroup_2_1_1_2 = (Group)cUnorderedGroup_2_1_1.eContents().get(2);
		private final Keyword cDecompositionTypeKeyword_2_1_1_2_0 = (Keyword)cGroup_2_1_1_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_1_2_1 = (Keyword)cGroup_2_1_1_2.eContents().get(1);
		private final Assignment cDecompositionTypeAssignment_2_1_1_2_2 = (Assignment)cGroup_2_1_1_2.eContents().get(2);
		private final RuleCall cDecompositionTypeDecompositionTypeEnumRuleCall_2_1_1_2_2_0 = (RuleCall)cDecompositionTypeAssignment_2_1_1_2_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_2_3 = (Keyword)cGroup_2_1_1_2.eContents().get(3);
		private final Group cGroup_2_1_1_3 = (Group)cUnorderedGroup_2_1_1.eContents().get(3);
		private final Keyword cImportanceKeyword_2_1_1_3_0 = (Keyword)cGroup_2_1_1_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_1_3_1 = (Keyword)cGroup_2_1_1_3.eContents().get(1);
		private final Alternatives cAlternatives_2_1_1_3_2 = (Alternatives)cGroup_2_1_1_3.eContents().get(2);
		private final Assignment cImportanceAssignment_2_1_1_3_2_0 = (Assignment)cAlternatives_2_1_1_3_2.eContents().get(0);
		private final RuleCall cImportanceImportanceTypeEnumRuleCall_2_1_1_3_2_0_0 = (RuleCall)cImportanceAssignment_2_1_1_3_2_0.eContents().get(0);
		private final Assignment cImportanceQuantitativeAssignment_2_1_1_3_2_1 = (Assignment)cAlternatives_2_1_1_3_2.eContents().get(1);
		private final RuleCall cImportanceQuantitativeQUALITATIVEVALUETerminalRuleCall_2_1_1_3_2_1_0 = (RuleCall)cImportanceQuantitativeAssignment_2_1_1_3_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_3_3 = (Keyword)cGroup_2_1_1_3.eContents().get(3);
		private final Assignment cMetaDataAssignment_2_1_1_4 = (Assignment)cUnorderedGroup_2_1_1.eContents().get(4);
		private final RuleCall cMetaDataMetadataParserRuleCall_2_1_1_4_0 = (RuleCall)cMetaDataAssignment_2_1_1_4.eContents().get(0);
		private final Group cGroup_2_1_1_5 = (Group)cUnorderedGroup_2_1_1.eContents().get(5);
		private final Keyword cColorKeyword_2_1_1_5_0 = (Keyword)cGroup_2_1_1_5.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_1_5_1 = (Keyword)cGroup_2_1_1_5.eContents().get(1);
		private final Assignment cFillColorAssignment_2_1_1_5_2 = (Assignment)cGroup_2_1_1_5.eContents().get(2);
		private final RuleCall cFillColorColorEnumRuleCall_2_1_1_5_2_0 = (RuleCall)cFillColorAssignment_2_1_1_5_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_5_3 = (Keyword)cGroup_2_1_1_5.eContents().get(3);
		private final Assignment cElementLinksAssignment_2_1_1_6 = (Assignment)cUnorderedGroup_2_1_1.eContents().get(6);
		private final RuleCall cElementLinksInLineElementLinkParserRuleCall_2_1_1_6_0 = (RuleCall)cElementLinksAssignment_2_1_1_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//Task:
		//	"task" name=ID (";" | "{" (("name" "=" label=STRING ";")? / *
		//				 *TODO I must give a default value for importanceQuantitative, which is zero, to this attribute.
		//				 * 		This can be done through the post processing mechanism in xText 
		//				 * / & ("description" "=" description=STRING ";")? & ("decompositionType" "=" decompositionType=DecompositionType
		//	";")? & ("importance" "=" (importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE) ";")? &
		//	metaData+=Metadata* & ("color" "=" fillColor=Color ";")? & elementLinks+=InLineElementLink*) "}");
		public ParserRule getRule() { return rule; }

		//"task" name=ID (";" | "{" (("name" "=" label=STRING ";")? / *
		//				 *TODO I must give a default value for importanceQuantitative, which is zero, to this attribute.
		//				 * 		This can be done through the post processing mechanism in xText 
		//				 * / & ("description" "=" description=STRING ";")? & ("decompositionType" "=" decompositionType=DecompositionType
		//";")? & ("importance" "=" (importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE) ";")? &
		//metaData+=Metadata* & ("color" "=" fillColor=Color ";")? & elementLinks+=InLineElementLink*) "}")
		public Group getGroup() { return cGroup; }

		//"task"
		public Keyword getTaskKeyword_0() { return cTaskKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//";" | "{" (("name" "=" label=STRING ";")? / *
		//				 *TODO I must give a default value for importanceQuantitative, which is zero, to this attribute.
		//				 * 		This can be done through the post processing mechanism in xText 
		//				 * / & ("description" "=" description=STRING ";")? & ("decompositionType" "=" decompositionType=DecompositionType
		//";")? & ("importance" "=" (importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE) ";")? &
		//metaData+=Metadata* & ("color" "=" fillColor=Color ";")? & elementLinks+=InLineElementLink*) "}"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//";"
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }

		//"{" (("name" "=" label=STRING ";")? / *
		//				 *TODO I must give a default value for importanceQuantitative, which is zero, to this attribute.
		//				 * 		This can be done through the post processing mechanism in xText 
		//				 * / & ("description" "=" description=STRING ";")? & ("decompositionType" "=" decompositionType=DecompositionType
		//";")? & ("importance" "=" (importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE) ";")? &
		//metaData+=Metadata* & ("color" "=" fillColor=Color ";")? & elementLinks+=InLineElementLink*) "}"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }

		//("name" "=" label=STRING ";")? / *
		//				 *TODO I must give a default value for importanceQuantitative, which is zero, to this attribute.
		//				 * 		This can be done through the post processing mechanism in xText 
		//				 * / & ("description" "=" description=STRING ";")? & ("decompositionType" "=" decompositionType=DecompositionType
		//";")? & ("importance" "=" (importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE) ";")? &
		//metaData+=Metadata* & ("color" "=" fillColor=Color ";")? & elementLinks+=InLineElementLink*
		public UnorderedGroup getUnorderedGroup_2_1_1() { return cUnorderedGroup_2_1_1; }

		//("name" "=" label=STRING ";")?
		public Group getGroup_2_1_1_0() { return cGroup_2_1_1_0; }

		//"name"
		public Keyword getNameKeyword_2_1_1_0_0() { return cNameKeyword_2_1_1_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_1_0_1() { return cEqualsSignKeyword_2_1_1_0_1; }

		//label=STRING
		public Assignment getLabelAssignment_2_1_1_0_2() { return cLabelAssignment_2_1_1_0_2; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_2_1_1_0_2_0() { return cLabelSTRINGTerminalRuleCall_2_1_1_0_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1_0_3() { return cSemicolonKeyword_2_1_1_0_3; }

		//("description" "=" description=STRING ";")?
		public Group getGroup_2_1_1_1() { return cGroup_2_1_1_1; }

		//"description"
		public Keyword getDescriptionKeyword_2_1_1_1_0() { return cDescriptionKeyword_2_1_1_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_1_1_1() { return cEqualsSignKeyword_2_1_1_1_1; }

		//description=STRING
		public Assignment getDescriptionAssignment_2_1_1_1_2() { return cDescriptionAssignment_2_1_1_1_2; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_1_1_1_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_1_1_1_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1_1_3() { return cSemicolonKeyword_2_1_1_1_3; }

		//("decompositionType" "=" decompositionType=DecompositionType ";")?
		public Group getGroup_2_1_1_2() { return cGroup_2_1_1_2; }

		//"decompositionType"
		public Keyword getDecompositionTypeKeyword_2_1_1_2_0() { return cDecompositionTypeKeyword_2_1_1_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_1_2_1() { return cEqualsSignKeyword_2_1_1_2_1; }

		//decompositionType=DecompositionType
		public Assignment getDecompositionTypeAssignment_2_1_1_2_2() { return cDecompositionTypeAssignment_2_1_1_2_2; }

		//DecompositionType
		public RuleCall getDecompositionTypeDecompositionTypeEnumRuleCall_2_1_1_2_2_0() { return cDecompositionTypeDecompositionTypeEnumRuleCall_2_1_1_2_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1_2_3() { return cSemicolonKeyword_2_1_1_2_3; }

		//("importance" "=" (importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE) ";")?
		public Group getGroup_2_1_1_3() { return cGroup_2_1_1_3; }

		//"importance"
		public Keyword getImportanceKeyword_2_1_1_3_0() { return cImportanceKeyword_2_1_1_3_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_1_3_1() { return cEqualsSignKeyword_2_1_1_3_1; }

		//importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE
		public Alternatives getAlternatives_2_1_1_3_2() { return cAlternatives_2_1_1_3_2; }

		//importance=ImportanceType
		public Assignment getImportanceAssignment_2_1_1_3_2_0() { return cImportanceAssignment_2_1_1_3_2_0; }

		//ImportanceType
		public RuleCall getImportanceImportanceTypeEnumRuleCall_2_1_1_3_2_0_0() { return cImportanceImportanceTypeEnumRuleCall_2_1_1_3_2_0_0; }

		//importanceQuantitative=QUALITATIVEVALUE
		public Assignment getImportanceQuantitativeAssignment_2_1_1_3_2_1() { return cImportanceQuantitativeAssignment_2_1_1_3_2_1; }

		//QUALITATIVEVALUE
		public RuleCall getImportanceQuantitativeQUALITATIVEVALUETerminalRuleCall_2_1_1_3_2_1_0() { return cImportanceQuantitativeQUALITATIVEVALUETerminalRuleCall_2_1_1_3_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1_3_3() { return cSemicolonKeyword_2_1_1_3_3; }

		//metaData+=Metadata*
		public Assignment getMetaDataAssignment_2_1_1_4() { return cMetaDataAssignment_2_1_1_4; }

		//Metadata
		public RuleCall getMetaDataMetadataParserRuleCall_2_1_1_4_0() { return cMetaDataMetadataParserRuleCall_2_1_1_4_0; }

		//("color" "=" fillColor=Color ";")?
		public Group getGroup_2_1_1_5() { return cGroup_2_1_1_5; }

		//"color"
		public Keyword getColorKeyword_2_1_1_5_0() { return cColorKeyword_2_1_1_5_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_1_5_1() { return cEqualsSignKeyword_2_1_1_5_1; }

		//fillColor=Color
		public Assignment getFillColorAssignment_2_1_1_5_2() { return cFillColorAssignment_2_1_1_5_2; }

		//Color
		public RuleCall getFillColorColorEnumRuleCall_2_1_1_5_2_0() { return cFillColorColorEnumRuleCall_2_1_1_5_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1_5_3() { return cSemicolonKeyword_2_1_1_5_3; }

		//elementLinks+=InLineElementLink*
		public Assignment getElementLinksAssignment_2_1_1_6() { return cElementLinksAssignment_2_1_1_6; }

		//InLineElementLink
		public RuleCall getElementLinksInLineElementLinkParserRuleCall_2_1_1_6_0() { return cElementLinksInLineElementLinkParserRuleCall_2_1_1_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}

	public class ResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Resource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2_1_1 = (UnorderedGroup)cGroup_2_1.eContents().get(1);
		private final Group cGroup_2_1_1_0 = (Group)cUnorderedGroup_2_1_1.eContents().get(0);
		private final Keyword cNameKeyword_2_1_1_0_0 = (Keyword)cGroup_2_1_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_1_0_1 = (Keyword)cGroup_2_1_1_0.eContents().get(1);
		private final Assignment cLabelAssignment_2_1_1_0_2 = (Assignment)cGroup_2_1_1_0.eContents().get(2);
		private final RuleCall cLabelSTRINGTerminalRuleCall_2_1_1_0_2_0 = (RuleCall)cLabelAssignment_2_1_1_0_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_0_3 = (Keyword)cGroup_2_1_1_0.eContents().get(3);
		private final Group cGroup_2_1_1_1 = (Group)cUnorderedGroup_2_1_1.eContents().get(1);
		private final Keyword cDescriptionKeyword_2_1_1_1_0 = (Keyword)cGroup_2_1_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_1_1_1 = (Keyword)cGroup_2_1_1_1.eContents().get(1);
		private final Assignment cDescriptionAssignment_2_1_1_1_2 = (Assignment)cGroup_2_1_1_1.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_1_1_1_2_0 = (RuleCall)cDescriptionAssignment_2_1_1_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_1_3 = (Keyword)cGroup_2_1_1_1.eContents().get(3);
		private final Group cGroup_2_1_1_2 = (Group)cUnorderedGroup_2_1_1.eContents().get(2);
		private final Keyword cDecompositionTypeKeyword_2_1_1_2_0 = (Keyword)cGroup_2_1_1_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_1_2_1 = (Keyword)cGroup_2_1_1_2.eContents().get(1);
		private final Assignment cDecompositionTypeAssignment_2_1_1_2_2 = (Assignment)cGroup_2_1_1_2.eContents().get(2);
		private final RuleCall cDecompositionTypeDecompositionTypeEnumRuleCall_2_1_1_2_2_0 = (RuleCall)cDecompositionTypeAssignment_2_1_1_2_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_2_3 = (Keyword)cGroup_2_1_1_2.eContents().get(3);
		private final Group cGroup_2_1_1_3 = (Group)cUnorderedGroup_2_1_1.eContents().get(3);
		private final Keyword cImportanceKeyword_2_1_1_3_0 = (Keyword)cGroup_2_1_1_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_1_3_1 = (Keyword)cGroup_2_1_1_3.eContents().get(1);
		private final Alternatives cAlternatives_2_1_1_3_2 = (Alternatives)cGroup_2_1_1_3.eContents().get(2);
		private final Assignment cImportanceAssignment_2_1_1_3_2_0 = (Assignment)cAlternatives_2_1_1_3_2.eContents().get(0);
		private final RuleCall cImportanceImportanceTypeEnumRuleCall_2_1_1_3_2_0_0 = (RuleCall)cImportanceAssignment_2_1_1_3_2_0.eContents().get(0);
		private final Assignment cImportanceQuantitativeAssignment_2_1_1_3_2_1 = (Assignment)cAlternatives_2_1_1_3_2.eContents().get(1);
		private final RuleCall cImportanceQuantitativeQUALITATIVEVALUETerminalRuleCall_2_1_1_3_2_1_0 = (RuleCall)cImportanceQuantitativeAssignment_2_1_1_3_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_3_3 = (Keyword)cGroup_2_1_1_3.eContents().get(3);
		private final Assignment cMetaDataAssignment_2_1_1_4 = (Assignment)cUnorderedGroup_2_1_1.eContents().get(4);
		private final RuleCall cMetaDataMetadataParserRuleCall_2_1_1_4_0 = (RuleCall)cMetaDataAssignment_2_1_1_4.eContents().get(0);
		private final Group cGroup_2_1_1_5 = (Group)cUnorderedGroup_2_1_1.eContents().get(5);
		private final Keyword cColorKeyword_2_1_1_5_0 = (Keyword)cGroup_2_1_1_5.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_1_5_1 = (Keyword)cGroup_2_1_1_5.eContents().get(1);
		private final Assignment cFillColorAssignment_2_1_1_5_2 = (Assignment)cGroup_2_1_1_5.eContents().get(2);
		private final RuleCall cFillColorColorEnumRuleCall_2_1_1_5_2_0 = (RuleCall)cFillColorAssignment_2_1_1_5_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_5_3 = (Keyword)cGroup_2_1_1_5.eContents().get(3);
		private final Assignment cElementLinksAssignment_2_1_1_6 = (Assignment)cUnorderedGroup_2_1_1.eContents().get(6);
		private final RuleCall cElementLinksInLineElementLinkParserRuleCall_2_1_1_6_0 = (RuleCall)cElementLinksAssignment_2_1_1_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//Resource:
		//	"resource" name=ID (";" | "{" (("name" "=" label=STRING ";")? / *
		//				 *TODO I must give a default value for importanceQuantitative, which is zero, to this attribute.
		//				 * 		This can be done through the post processing mechanism in xText 
		//				 * / & ("description" "=" description=STRING ";")? & ("decompositionType" "=" decompositionType=DecompositionType
		//	";")? & ("importance" "=" (importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE) ";")? &
		//	metaData+=Metadata* & ("color" "=" fillColor=Color ";")? & elementLinks+=InLineElementLink*) "}");
		public ParserRule getRule() { return rule; }

		//"resource" name=ID (";" | "{" (("name" "=" label=STRING ";")? / *
		//				 *TODO I must give a default value for importanceQuantitative, which is zero, to this attribute.
		//				 * 		This can be done through the post processing mechanism in xText 
		//				 * / & ("description" "=" description=STRING ";")? & ("decompositionType" "=" decompositionType=DecompositionType
		//";")? & ("importance" "=" (importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE) ";")? &
		//metaData+=Metadata* & ("color" "=" fillColor=Color ";")? & elementLinks+=InLineElementLink*) "}")
		public Group getGroup() { return cGroup; }

		//"resource"
		public Keyword getResourceKeyword_0() { return cResourceKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//";" | "{" (("name" "=" label=STRING ";")? / *
		//				 *TODO I must give a default value for importanceQuantitative, which is zero, to this attribute.
		//				 * 		This can be done through the post processing mechanism in xText 
		//				 * / & ("description" "=" description=STRING ";")? & ("decompositionType" "=" decompositionType=DecompositionType
		//";")? & ("importance" "=" (importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE) ";")? &
		//metaData+=Metadata* & ("color" "=" fillColor=Color ";")? & elementLinks+=InLineElementLink*) "}"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//";"
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }

		//"{" (("name" "=" label=STRING ";")? / *
		//				 *TODO I must give a default value for importanceQuantitative, which is zero, to this attribute.
		//				 * 		This can be done through the post processing mechanism in xText 
		//				 * / & ("description" "=" description=STRING ";")? & ("decompositionType" "=" decompositionType=DecompositionType
		//";")? & ("importance" "=" (importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE) ";")? &
		//metaData+=Metadata* & ("color" "=" fillColor=Color ";")? & elementLinks+=InLineElementLink*) "}"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }

		//("name" "=" label=STRING ";")? / *
		//				 *TODO I must give a default value for importanceQuantitative, which is zero, to this attribute.
		//				 * 		This can be done through the post processing mechanism in xText 
		//				 * / & ("description" "=" description=STRING ";")? & ("decompositionType" "=" decompositionType=DecompositionType
		//";")? & ("importance" "=" (importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE) ";")? &
		//metaData+=Metadata* & ("color" "=" fillColor=Color ";")? & elementLinks+=InLineElementLink*
		public UnorderedGroup getUnorderedGroup_2_1_1() { return cUnorderedGroup_2_1_1; }

		//("name" "=" label=STRING ";")?
		public Group getGroup_2_1_1_0() { return cGroup_2_1_1_0; }

		//"name"
		public Keyword getNameKeyword_2_1_1_0_0() { return cNameKeyword_2_1_1_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_1_0_1() { return cEqualsSignKeyword_2_1_1_0_1; }

		//label=STRING
		public Assignment getLabelAssignment_2_1_1_0_2() { return cLabelAssignment_2_1_1_0_2; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_2_1_1_0_2_0() { return cLabelSTRINGTerminalRuleCall_2_1_1_0_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1_0_3() { return cSemicolonKeyword_2_1_1_0_3; }

		//("description" "=" description=STRING ";")?
		public Group getGroup_2_1_1_1() { return cGroup_2_1_1_1; }

		//"description"
		public Keyword getDescriptionKeyword_2_1_1_1_0() { return cDescriptionKeyword_2_1_1_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_1_1_1() { return cEqualsSignKeyword_2_1_1_1_1; }

		//description=STRING
		public Assignment getDescriptionAssignment_2_1_1_1_2() { return cDescriptionAssignment_2_1_1_1_2; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_1_1_1_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_1_1_1_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1_1_3() { return cSemicolonKeyword_2_1_1_1_3; }

		//("decompositionType" "=" decompositionType=DecompositionType ";")?
		public Group getGroup_2_1_1_2() { return cGroup_2_1_1_2; }

		//"decompositionType"
		public Keyword getDecompositionTypeKeyword_2_1_1_2_0() { return cDecompositionTypeKeyword_2_1_1_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_1_2_1() { return cEqualsSignKeyword_2_1_1_2_1; }

		//decompositionType=DecompositionType
		public Assignment getDecompositionTypeAssignment_2_1_1_2_2() { return cDecompositionTypeAssignment_2_1_1_2_2; }

		//DecompositionType
		public RuleCall getDecompositionTypeDecompositionTypeEnumRuleCall_2_1_1_2_2_0() { return cDecompositionTypeDecompositionTypeEnumRuleCall_2_1_1_2_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1_2_3() { return cSemicolonKeyword_2_1_1_2_3; }

		//("importance" "=" (importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE) ";")?
		public Group getGroup_2_1_1_3() { return cGroup_2_1_1_3; }

		//"importance"
		public Keyword getImportanceKeyword_2_1_1_3_0() { return cImportanceKeyword_2_1_1_3_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_1_3_1() { return cEqualsSignKeyword_2_1_1_3_1; }

		//importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE
		public Alternatives getAlternatives_2_1_1_3_2() { return cAlternatives_2_1_1_3_2; }

		//importance=ImportanceType
		public Assignment getImportanceAssignment_2_1_1_3_2_0() { return cImportanceAssignment_2_1_1_3_2_0; }

		//ImportanceType
		public RuleCall getImportanceImportanceTypeEnumRuleCall_2_1_1_3_2_0_0() { return cImportanceImportanceTypeEnumRuleCall_2_1_1_3_2_0_0; }

		//importanceQuantitative=QUALITATIVEVALUE
		public Assignment getImportanceQuantitativeAssignment_2_1_1_3_2_1() { return cImportanceQuantitativeAssignment_2_1_1_3_2_1; }

		//QUALITATIVEVALUE
		public RuleCall getImportanceQuantitativeQUALITATIVEVALUETerminalRuleCall_2_1_1_3_2_1_0() { return cImportanceQuantitativeQUALITATIVEVALUETerminalRuleCall_2_1_1_3_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1_3_3() { return cSemicolonKeyword_2_1_1_3_3; }

		//metaData+=Metadata*
		public Assignment getMetaDataAssignment_2_1_1_4() { return cMetaDataAssignment_2_1_1_4; }

		//Metadata
		public RuleCall getMetaDataMetadataParserRuleCall_2_1_1_4_0() { return cMetaDataMetadataParserRuleCall_2_1_1_4_0; }

		//("color" "=" fillColor=Color ";")?
		public Group getGroup_2_1_1_5() { return cGroup_2_1_1_5; }

		//"color"
		public Keyword getColorKeyword_2_1_1_5_0() { return cColorKeyword_2_1_1_5_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_1_5_1() { return cEqualsSignKeyword_2_1_1_5_1; }

		//fillColor=Color
		public Assignment getFillColorAssignment_2_1_1_5_2() { return cFillColorAssignment_2_1_1_5_2; }

		//Color
		public RuleCall getFillColorColorEnumRuleCall_2_1_1_5_2_0() { return cFillColorColorEnumRuleCall_2_1_1_5_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1_5_3() { return cSemicolonKeyword_2_1_1_5_3; }

		//elementLinks+=InLineElementLink*
		public Assignment getElementLinksAssignment_2_1_1_6() { return cElementLinksAssignment_2_1_1_6; }

		//InLineElementLink
		public RuleCall getElementLinksInLineElementLinkParserRuleCall_2_1_1_6_0() { return cElementLinksInLineElementLinkParserRuleCall_2_1_1_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}

	public class IndicatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Indicator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIndicatorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2_1_1 = (UnorderedGroup)cGroup_2_1.eContents().get(1);
		private final Group cGroup_2_1_1_0 = (Group)cUnorderedGroup_2_1_1.eContents().get(0);
		private final Keyword cNameKeyword_2_1_1_0_0 = (Keyword)cGroup_2_1_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_1_0_1 = (Keyword)cGroup_2_1_1_0.eContents().get(1);
		private final Assignment cLabelAssignment_2_1_1_0_2 = (Assignment)cGroup_2_1_1_0.eContents().get(2);
		private final RuleCall cLabelSTRINGTerminalRuleCall_2_1_1_0_2_0 = (RuleCall)cLabelAssignment_2_1_1_0_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_0_3 = (Keyword)cGroup_2_1_1_0.eContents().get(3);
		private final Group cGroup_2_1_1_1 = (Group)cUnorderedGroup_2_1_1.eContents().get(1);
		private final Keyword cDescriptionKeyword_2_1_1_1_0 = (Keyword)cGroup_2_1_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_1_1_1 = (Keyword)cGroup_2_1_1_1.eContents().get(1);
		private final Assignment cDescriptionAssignment_2_1_1_1_2 = (Assignment)cGroup_2_1_1_1.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_1_1_1_2_0 = (RuleCall)cDescriptionAssignment_2_1_1_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_1_3 = (Keyword)cGroup_2_1_1_1.eContents().get(3);
		private final Group cGroup_2_1_1_2 = (Group)cUnorderedGroup_2_1_1.eContents().get(2);
		private final Keyword cDecompositionTypeKeyword_2_1_1_2_0 = (Keyword)cGroup_2_1_1_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_1_2_1 = (Keyword)cGroup_2_1_1_2.eContents().get(1);
		private final Assignment cDecompositionTypeAssignment_2_1_1_2_2 = (Assignment)cGroup_2_1_1_2.eContents().get(2);
		private final RuleCall cDecompositionTypeDecompositionTypeEnumRuleCall_2_1_1_2_2_0 = (RuleCall)cDecompositionTypeAssignment_2_1_1_2_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_2_3 = (Keyword)cGroup_2_1_1_2.eContents().get(3);
		private final Group cGroup_2_1_1_3 = (Group)cUnorderedGroup_2_1_1.eContents().get(3);
		private final Keyword cImportanceKeyword_2_1_1_3_0 = (Keyword)cGroup_2_1_1_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_1_3_1 = (Keyword)cGroup_2_1_1_3.eContents().get(1);
		private final Alternatives cAlternatives_2_1_1_3_2 = (Alternatives)cGroup_2_1_1_3.eContents().get(2);
		private final Assignment cImportanceAssignment_2_1_1_3_2_0 = (Assignment)cAlternatives_2_1_1_3_2.eContents().get(0);
		private final RuleCall cImportanceImportanceTypeEnumRuleCall_2_1_1_3_2_0_0 = (RuleCall)cImportanceAssignment_2_1_1_3_2_0.eContents().get(0);
		private final Assignment cImportanceQuantitativeAssignment_2_1_1_3_2_1 = (Assignment)cAlternatives_2_1_1_3_2.eContents().get(1);
		private final RuleCall cImportanceQuantitativeQUALITATIVEVALUETerminalRuleCall_2_1_1_3_2_1_0 = (RuleCall)cImportanceQuantitativeAssignment_2_1_1_3_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_3_3 = (Keyword)cGroup_2_1_1_3.eContents().get(3);
		private final Assignment cMetaDataAssignment_2_1_1_4 = (Assignment)cUnorderedGroup_2_1_1.eContents().get(4);
		private final RuleCall cMetaDataMetadataParserRuleCall_2_1_1_4_0 = (RuleCall)cMetaDataAssignment_2_1_1_4.eContents().get(0);
		private final Group cGroup_2_1_1_5 = (Group)cUnorderedGroup_2_1_1.eContents().get(5);
		private final Keyword cColorKeyword_2_1_1_5_0 = (Keyword)cGroup_2_1_1_5.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_1_5_1 = (Keyword)cGroup_2_1_1_5.eContents().get(1);
		private final Assignment cFillColorAssignment_2_1_1_5_2 = (Assignment)cGroup_2_1_1_5.eContents().get(2);
		private final RuleCall cFillColorColorEnumRuleCall_2_1_1_5_2_0 = (RuleCall)cFillColorAssignment_2_1_1_5_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_5_3 = (Keyword)cGroup_2_1_1_5.eContents().get(3);
		private final Assignment cElementLinksAssignment_2_1_1_6 = (Assignment)cUnorderedGroup_2_1_1.eContents().get(6);
		private final RuleCall cElementLinksInLineElementLinkParserRuleCall_2_1_1_6_0 = (RuleCall)cElementLinksAssignment_2_1_1_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//Indicator:
		//	"indicator" name=ID (";" | "{" (("name" "=" label=STRING ";")? / *
		//				 *TODO I must give a default value for importanceQuantitative, which is zero, to this attribute.
		//				 * 		This can be done through the post processing mechanism in xText 
		//				 * / & ("description" "=" description=STRING ";")? & ("decompositionType" "=" decompositionType=DecompositionType
		//	";")? & ("importance" "=" (importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE) ";")? &
		//	metaData+=Metadata* & ("color" "=" fillColor=Color ";")? & elementLinks+=InLineElementLink*) "}");
		public ParserRule getRule() { return rule; }

		//"indicator" name=ID (";" | "{" (("name" "=" label=STRING ";")? / *
		//				 *TODO I must give a default value for importanceQuantitative, which is zero, to this attribute.
		//				 * 		This can be done through the post processing mechanism in xText 
		//				 * / & ("description" "=" description=STRING ";")? & ("decompositionType" "=" decompositionType=DecompositionType
		//";")? & ("importance" "=" (importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE) ";")? &
		//metaData+=Metadata* & ("color" "=" fillColor=Color ";")? & elementLinks+=InLineElementLink*) "}")
		public Group getGroup() { return cGroup; }

		//"indicator"
		public Keyword getIndicatorKeyword_0() { return cIndicatorKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//";" | "{" (("name" "=" label=STRING ";")? / *
		//				 *TODO I must give a default value for importanceQuantitative, which is zero, to this attribute.
		//				 * 		This can be done through the post processing mechanism in xText 
		//				 * / & ("description" "=" description=STRING ";")? & ("decompositionType" "=" decompositionType=DecompositionType
		//";")? & ("importance" "=" (importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE) ";")? &
		//metaData+=Metadata* & ("color" "=" fillColor=Color ";")? & elementLinks+=InLineElementLink*) "}"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//";"
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }

		//"{" (("name" "=" label=STRING ";")? / *
		//				 *TODO I must give a default value for importanceQuantitative, which is zero, to this attribute.
		//				 * 		This can be done through the post processing mechanism in xText 
		//				 * / & ("description" "=" description=STRING ";")? & ("decompositionType" "=" decompositionType=DecompositionType
		//";")? & ("importance" "=" (importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE) ";")? &
		//metaData+=Metadata* & ("color" "=" fillColor=Color ";")? & elementLinks+=InLineElementLink*) "}"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }

		//("name" "=" label=STRING ";")? / *
		//				 *TODO I must give a default value for importanceQuantitative, which is zero, to this attribute.
		//				 * 		This can be done through the post processing mechanism in xText 
		//				 * / & ("description" "=" description=STRING ";")? & ("decompositionType" "=" decompositionType=DecompositionType
		//";")? & ("importance" "=" (importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE) ";")? &
		//metaData+=Metadata* & ("color" "=" fillColor=Color ";")? & elementLinks+=InLineElementLink*
		public UnorderedGroup getUnorderedGroup_2_1_1() { return cUnorderedGroup_2_1_1; }

		//("name" "=" label=STRING ";")?
		public Group getGroup_2_1_1_0() { return cGroup_2_1_1_0; }

		//"name"
		public Keyword getNameKeyword_2_1_1_0_0() { return cNameKeyword_2_1_1_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_1_0_1() { return cEqualsSignKeyword_2_1_1_0_1; }

		//label=STRING
		public Assignment getLabelAssignment_2_1_1_0_2() { return cLabelAssignment_2_1_1_0_2; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_2_1_1_0_2_0() { return cLabelSTRINGTerminalRuleCall_2_1_1_0_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1_0_3() { return cSemicolonKeyword_2_1_1_0_3; }

		//("description" "=" description=STRING ";")?
		public Group getGroup_2_1_1_1() { return cGroup_2_1_1_1; }

		//"description"
		public Keyword getDescriptionKeyword_2_1_1_1_0() { return cDescriptionKeyword_2_1_1_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_1_1_1() { return cEqualsSignKeyword_2_1_1_1_1; }

		//description=STRING
		public Assignment getDescriptionAssignment_2_1_1_1_2() { return cDescriptionAssignment_2_1_1_1_2; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_1_1_1_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_1_1_1_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1_1_3() { return cSemicolonKeyword_2_1_1_1_3; }

		//("decompositionType" "=" decompositionType=DecompositionType ";")?
		public Group getGroup_2_1_1_2() { return cGroup_2_1_1_2; }

		//"decompositionType"
		public Keyword getDecompositionTypeKeyword_2_1_1_2_0() { return cDecompositionTypeKeyword_2_1_1_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_1_2_1() { return cEqualsSignKeyword_2_1_1_2_1; }

		//decompositionType=DecompositionType
		public Assignment getDecompositionTypeAssignment_2_1_1_2_2() { return cDecompositionTypeAssignment_2_1_1_2_2; }

		//DecompositionType
		public RuleCall getDecompositionTypeDecompositionTypeEnumRuleCall_2_1_1_2_2_0() { return cDecompositionTypeDecompositionTypeEnumRuleCall_2_1_1_2_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1_2_3() { return cSemicolonKeyword_2_1_1_2_3; }

		//("importance" "=" (importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE) ";")?
		public Group getGroup_2_1_1_3() { return cGroup_2_1_1_3; }

		//"importance"
		public Keyword getImportanceKeyword_2_1_1_3_0() { return cImportanceKeyword_2_1_1_3_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_1_3_1() { return cEqualsSignKeyword_2_1_1_3_1; }

		//importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE
		public Alternatives getAlternatives_2_1_1_3_2() { return cAlternatives_2_1_1_3_2; }

		//importance=ImportanceType
		public Assignment getImportanceAssignment_2_1_1_3_2_0() { return cImportanceAssignment_2_1_1_3_2_0; }

		//ImportanceType
		public RuleCall getImportanceImportanceTypeEnumRuleCall_2_1_1_3_2_0_0() { return cImportanceImportanceTypeEnumRuleCall_2_1_1_3_2_0_0; }

		//importanceQuantitative=QUALITATIVEVALUE
		public Assignment getImportanceQuantitativeAssignment_2_1_1_3_2_1() { return cImportanceQuantitativeAssignment_2_1_1_3_2_1; }

		//QUALITATIVEVALUE
		public RuleCall getImportanceQuantitativeQUALITATIVEVALUETerminalRuleCall_2_1_1_3_2_1_0() { return cImportanceQuantitativeQUALITATIVEVALUETerminalRuleCall_2_1_1_3_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1_3_3() { return cSemicolonKeyword_2_1_1_3_3; }

		//metaData+=Metadata*
		public Assignment getMetaDataAssignment_2_1_1_4() { return cMetaDataAssignment_2_1_1_4; }

		//Metadata
		public RuleCall getMetaDataMetadataParserRuleCall_2_1_1_4_0() { return cMetaDataMetadataParserRuleCall_2_1_1_4_0; }

		//("color" "=" fillColor=Color ";")?
		public Group getGroup_2_1_1_5() { return cGroup_2_1_1_5; }

		//"color"
		public Keyword getColorKeyword_2_1_1_5_0() { return cColorKeyword_2_1_1_5_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_1_5_1() { return cEqualsSignKeyword_2_1_1_5_1; }

		//fillColor=Color
		public Assignment getFillColorAssignment_2_1_1_5_2() { return cFillColorAssignment_2_1_1_5_2; }

		//Color
		public RuleCall getFillColorColorEnumRuleCall_2_1_1_5_2_0() { return cFillColorColorEnumRuleCall_2_1_1_5_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1_5_3() { return cSemicolonKeyword_2_1_1_5_3; }

		//elementLinks+=InLineElementLink*
		public Assignment getElementLinksAssignment_2_1_1_6() { return cElementLinksAssignment_2_1_1_6; }

		//InLineElementLink
		public RuleCall getElementLinksInLineElementLinkParserRuleCall_2_1_1_6_0() { return cElementLinksInLineElementLinkParserRuleCall_2_1_1_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}

	public class BeliefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Belief");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBeliefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2_1_1 = (UnorderedGroup)cGroup_2_1.eContents().get(1);
		private final Group cGroup_2_1_1_0 = (Group)cUnorderedGroup_2_1_1.eContents().get(0);
		private final Keyword cNameKeyword_2_1_1_0_0 = (Keyword)cGroup_2_1_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_1_0_1 = (Keyword)cGroup_2_1_1_0.eContents().get(1);
		private final Assignment cLabelAssignment_2_1_1_0_2 = (Assignment)cGroup_2_1_1_0.eContents().get(2);
		private final RuleCall cLabelSTRINGTerminalRuleCall_2_1_1_0_2_0 = (RuleCall)cLabelAssignment_2_1_1_0_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_0_3 = (Keyword)cGroup_2_1_1_0.eContents().get(3);
		private final Assignment cMetaDataAssignment_2_1_1_1 = (Assignment)cUnorderedGroup_2_1_1.eContents().get(1);
		private final RuleCall cMetaDataMetadataParserRuleCall_2_1_1_1_0 = (RuleCall)cMetaDataAssignment_2_1_1_1.eContents().get(0);
		private final Group cGroup_2_1_1_2 = (Group)cUnorderedGroup_2_1_1.eContents().get(2);
		private final Keyword cColorKeyword_2_1_1_2_0 = (Keyword)cGroup_2_1_1_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_1_2_1 = (Keyword)cGroup_2_1_1_2.eContents().get(1);
		private final Assignment cFillColorAssignment_2_1_1_2_2 = (Assignment)cGroup_2_1_1_2.eContents().get(2);
		private final RuleCall cFillColorColorEnumRuleCall_2_1_1_2_2_0 = (RuleCall)cFillColorAssignment_2_1_1_2_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_2_3 = (Keyword)cGroup_2_1_1_2.eContents().get(3);
		private final Group cGroup_2_1_1_3 = (Group)cUnorderedGroup_2_1_1.eContents().get(3);
		private final Keyword cDescriptionKeyword_2_1_1_3_0 = (Keyword)cGroup_2_1_1_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_1_3_1 = (Keyword)cGroup_2_1_1_3.eContents().get(1);
		private final Assignment cDescriptionAssignment_2_1_1_3_2 = (Assignment)cGroup_2_1_1_3.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_1_1_3_2_0 = (RuleCall)cDescriptionAssignment_2_1_1_3_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_3_3 = (Keyword)cGroup_2_1_1_3.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//Belief:
		//	"belief" name=ID (";" | "{" (("name" "=" label=STRING ";")? & metaData+=Metadata* & ("color" "=" fillColor=Color
		//	";")? & ("description" "=" description=STRING ";")?) "}");
		public ParserRule getRule() { return rule; }

		//"belief" name=ID (";" | "{" (("name" "=" label=STRING ";")? & metaData+=Metadata* & ("color" "=" fillColor=Color ";")? &
		//("description" "=" description=STRING ";")?) "}")
		public Group getGroup() { return cGroup; }

		//"belief"
		public Keyword getBeliefKeyword_0() { return cBeliefKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//";" | "{" (("name" "=" label=STRING ";")? & metaData+=Metadata* & ("color" "=" fillColor=Color ";")? & ("description"
		//"=" description=STRING ";")?) "}"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//";"
		public Keyword getSemicolonKeyword_2_0() { return cSemicolonKeyword_2_0; }

		//"{" (("name" "=" label=STRING ";")? & metaData+=Metadata* & ("color" "=" fillColor=Color ";")? & ("description" "="
		//description=STRING ";")?) "}"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }

		//("name" "=" label=STRING ";")? & metaData+=Metadata* & ("color" "=" fillColor=Color ";")? & ("description" "="
		//description=STRING ";")?
		public UnorderedGroup getUnorderedGroup_2_1_1() { return cUnorderedGroup_2_1_1; }

		//("name" "=" label=STRING ";")?
		public Group getGroup_2_1_1_0() { return cGroup_2_1_1_0; }

		//"name"
		public Keyword getNameKeyword_2_1_1_0_0() { return cNameKeyword_2_1_1_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_1_0_1() { return cEqualsSignKeyword_2_1_1_0_1; }

		//label=STRING
		public Assignment getLabelAssignment_2_1_1_0_2() { return cLabelAssignment_2_1_1_0_2; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_2_1_1_0_2_0() { return cLabelSTRINGTerminalRuleCall_2_1_1_0_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1_0_3() { return cSemicolonKeyword_2_1_1_0_3; }

		//metaData+=Metadata*
		public Assignment getMetaDataAssignment_2_1_1_1() { return cMetaDataAssignment_2_1_1_1; }

		//Metadata
		public RuleCall getMetaDataMetadataParserRuleCall_2_1_1_1_0() { return cMetaDataMetadataParserRuleCall_2_1_1_1_0; }

		//("color" "=" fillColor=Color ";")?
		public Group getGroup_2_1_1_2() { return cGroup_2_1_1_2; }

		//"color"
		public Keyword getColorKeyword_2_1_1_2_0() { return cColorKeyword_2_1_1_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_1_2_1() { return cEqualsSignKeyword_2_1_1_2_1; }

		//fillColor=Color
		public Assignment getFillColorAssignment_2_1_1_2_2() { return cFillColorAssignment_2_1_1_2_2; }

		//Color
		public RuleCall getFillColorColorEnumRuleCall_2_1_1_2_2_0() { return cFillColorColorEnumRuleCall_2_1_1_2_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1_2_3() { return cSemicolonKeyword_2_1_1_2_3; }

		//("description" "=" description=STRING ";")?
		public Group getGroup_2_1_1_3() { return cGroup_2_1_1_3; }

		//"description"
		public Keyword getDescriptionKeyword_2_1_1_3_0() { return cDescriptionKeyword_2_1_1_3_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_1_3_1() { return cEqualsSignKeyword_2_1_1_3_1; }

		//description=STRING
		public Assignment getDescriptionAssignment_2_1_1_3_2() { return cDescriptionAssignment_2_1_1_3_2; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_1_1_3_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_1_1_3_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1_3_3() { return cSemicolonKeyword_2_1_1_3_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}

	public class ElementLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementLink");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNormalElementLinkParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInLineElementLinkParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// *******************************************ElementLink*******************************************
		//ElementLink:
		//	NormalElementLink | InLineElementLink;
		public ParserRule getRule() { return rule; }

		//NormalElementLink | InLineElementLink
		public Alternatives getAlternatives() { return cAlternatives; }

		//NormalElementLink
		public RuleCall getNormalElementLinkParserRuleCall_0() { return cNormalElementLinkParserRuleCall_0; }

		//InLineElementLink
		public RuleCall getInLineElementLinkParserRuleCall_1() { return cInLineElementLinkParserRuleCall_1; }
	}

	public class EndLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EndLink");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDependencyEndParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cContributionEndParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDecompositionEndParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//EndLink:
		//	DependencyEnd | ContributionEnd | DecompositionEnd;
		public ParserRule getRule() { return rule; }

		//DependencyEnd | ContributionEnd | DecompositionEnd
		public Alternatives getAlternatives() { return cAlternatives; }

		//DependencyEnd
		public RuleCall getDependencyEndParserRuleCall_0() { return cDependencyEndParserRuleCall_0; }

		//ContributionEnd
		public RuleCall getContributionEndParserRuleCall_1() { return cContributionEndParserRuleCall_1; }

		//DecompositionEnd
		public RuleCall getDecompositionEndParserRuleCall_2() { return cDecompositionEndParserRuleCall_2; }
	}

	public class NormalElementLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NormalElementLink");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNormalDecompositionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNormalContributionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNormalDependencyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNormalLinkParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//NormalElementLink:
		//	NormalDecomposition | NormalContribution | NormalDependency | NormalLink;
		public ParserRule getRule() { return rule; }

		//NormalDecomposition | NormalContribution | NormalDependency | NormalLink
		public Alternatives getAlternatives() { return cAlternatives; }

		//NormalDecomposition
		public RuleCall getNormalDecompositionParserRuleCall_0() { return cNormalDecompositionParserRuleCall_0; }

		//NormalContribution
		public RuleCall getNormalContributionParserRuleCall_1() { return cNormalContributionParserRuleCall_1; }

		//NormalDependency
		public RuleCall getNormalDependencyParserRuleCall_2() { return cNormalDependencyParserRuleCall_2; }

		//NormalLink
		public RuleCall getNormalLinkParserRuleCall_3() { return cNormalLinkParserRuleCall_3; }
	}

	public class NormalLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NormalLink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSrcAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSrcGRLElementCrossReference_0_0 = (CrossReference)cSrcAssignment_0.eContents().get(0);
		private final RuleCall cSrcGRLElementIDTerminalRuleCall_0_0_1 = (RuleCall)cSrcGRLElementCrossReference_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeLinkTypeCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeLinkTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cTypeLinkTypeCrossReference_1_0.eContents().get(1);
		private final Assignment cDestAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDestGRLElementCrossReference_2_0 = (CrossReference)cDestAssignment_2.eContents().get(0);
		private final RuleCall cDestGRLElementIDTerminalRuleCall_2_0_1 = (RuleCall)cDestGRLElementCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDestAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cDestGRLElementCrossReference_3_1_0 = (CrossReference)cDestAssignment_3_1.eContents().get(0);
		private final RuleCall cDestGRLElementIDTerminalRuleCall_3_1_0_1 = (RuleCall)cDestGRLElementCrossReference_3_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//NormalLink: //	src = [GRLElement | QualifiedName] type = [LinkType | QualifiedName] dest += [GRLElement | QualifiedName] (',' dest += [GRLElement | QualifiedName])* ';'
		//	src=[GRLElement] type=[LinkType] dest+=[GRLElement] ("," dest+=[GRLElement])* ";";
		public ParserRule getRule() { return rule; }

		////	src = [GRLElement | QualifiedName] type = [LinkType | QualifiedName] dest += [GRLElement | QualifiedName] (',' dest += [GRLElement | QualifiedName])* ';'
		//src=[GRLElement] type=[LinkType] dest+=[GRLElement] ("," dest+=[GRLElement])* ";"
		public Group getGroup() { return cGroup; }

		////	src = [GRLElement | QualifiedName] type = [LinkType | QualifiedName] dest += [GRLElement | QualifiedName] (',' dest += [GRLElement | QualifiedName])* ';'
		//src=[GRLElement]
		public Assignment getSrcAssignment_0() { return cSrcAssignment_0; }

		//[GRLElement]
		public CrossReference getSrcGRLElementCrossReference_0_0() { return cSrcGRLElementCrossReference_0_0; }

		//ID
		public RuleCall getSrcGRLElementIDTerminalRuleCall_0_0_1() { return cSrcGRLElementIDTerminalRuleCall_0_0_1; }

		//type=[LinkType]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[LinkType]
		public CrossReference getTypeLinkTypeCrossReference_1_0() { return cTypeLinkTypeCrossReference_1_0; }

		//ID
		public RuleCall getTypeLinkTypeIDTerminalRuleCall_1_0_1() { return cTypeLinkTypeIDTerminalRuleCall_1_0_1; }

		//dest+=[GRLElement]
		public Assignment getDestAssignment_2() { return cDestAssignment_2; }

		//[GRLElement]
		public CrossReference getDestGRLElementCrossReference_2_0() { return cDestGRLElementCrossReference_2_0; }

		//ID
		public RuleCall getDestGRLElementIDTerminalRuleCall_2_0_1() { return cDestGRLElementIDTerminalRuleCall_2_0_1; }

		//("," dest+=[GRLElement])*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//dest+=[GRLElement]
		public Assignment getDestAssignment_3_1() { return cDestAssignment_3_1; }

		//[GRLElement]
		public CrossReference getDestGRLElementCrossReference_3_1_0() { return cDestGRLElementCrossReference_3_1_0; }

		//ID
		public RuleCall getDestGRLElementIDTerminalRuleCall_3_1_0_1() { return cDestGRLElementIDTerminalRuleCall_3_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class NormalDependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NormalDependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSrcAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSrcSuperIntentionalElementCrossReference_0_0 = (CrossReference)cSrcAssignment_0.eContents().get(0);
		private final RuleCall cSrcSuperIntentionalElementQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cSrcSuperIntentionalElementCrossReference_0_0.eContents().get(1);
		private final Keyword cDependsOnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDestAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDestDependencyEndParserRuleCall_2_0 = (RuleCall)cDestAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDestAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDestDependencyEndParserRuleCall_3_1_0 = (RuleCall)cDestAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////Question:
		////A Dependency describes how a source actor definition depends on a destination actor definition (the dependee) for an intentional element or indicator (the dependum).
		//NormalDependency:
		//	src=[SuperIntentionalElement|QualifiedName] "dependsOn" dest+=DependencyEnd ("," dest+=DependencyEnd)* ";";
		public ParserRule getRule() { return rule; }

		//src=[SuperIntentionalElement|QualifiedName] "dependsOn" dest+=DependencyEnd ("," dest+=DependencyEnd)* ";"
		public Group getGroup() { return cGroup; }

		//src=[SuperIntentionalElement|QualifiedName]
		public Assignment getSrcAssignment_0() { return cSrcAssignment_0; }

		//[SuperIntentionalElement|QualifiedName]
		public CrossReference getSrcSuperIntentionalElementCrossReference_0_0() { return cSrcSuperIntentionalElementCrossReference_0_0; }

		//QualifiedName
		public RuleCall getSrcSuperIntentionalElementQualifiedNameParserRuleCall_0_0_1() { return cSrcSuperIntentionalElementQualifiedNameParserRuleCall_0_0_1; }

		//"dependsOn"
		public Keyword getDependsOnKeyword_1() { return cDependsOnKeyword_1; }

		//dest+=DependencyEnd
		public Assignment getDestAssignment_2() { return cDestAssignment_2; }

		//DependencyEnd
		public RuleCall getDestDependencyEndParserRuleCall_2_0() { return cDestDependencyEndParserRuleCall_2_0; }

		//("," dest+=DependencyEnd)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//dest+=DependencyEnd
		public Assignment getDestAssignment_3_1() { return cDestAssignment_3_1; }

		//DependencyEnd
		public RuleCall getDestDependencyEndParserRuleCall_3_1_0() { return cDestDependencyEndParserRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class NormalContributionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NormalContribution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSrcAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSrcSuperIntentionalElementCrossReference_0_0 = (CrossReference)cSrcAssignment_0.eContents().get(0);
		private final RuleCall cSrcSuperIntentionalElementQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cSrcSuperIntentionalElementCrossReference_0_0.eContents().get(1);
		private final Keyword cContributesToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDestAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDestContributionEndParserRuleCall_2_0 = (RuleCall)cDestAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDestAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDestContributionEndParserRuleCall_3_1_0 = (RuleCall)cDestAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// *
		//			 *TODO I must give a default value, which is 25, to this attribute.
		//			 * 		This can be done through the post processing mechanism in xText 
		//			 * / //			('quantitativeContribution' '=' quantitativeContribution=QUALITATIVEVALUE ';')?&
		////			('correlation' '=' correlation=BOOLEAN ';')?&
		//NormalContribution:
		//	src=[SuperIntentionalElement|QualifiedName] "contributesTo" dest+=ContributionEnd ("," dest+=ContributionEnd)* ";";
		public ParserRule getRule() { return rule; }

		//src=[SuperIntentionalElement|QualifiedName] "contributesTo" dest+=ContributionEnd ("," dest+=ContributionEnd)* ";"
		public Group getGroup() { return cGroup; }

		//src=[SuperIntentionalElement|QualifiedName]
		public Assignment getSrcAssignment_0() { return cSrcAssignment_0; }

		//[SuperIntentionalElement|QualifiedName]
		public CrossReference getSrcSuperIntentionalElementCrossReference_0_0() { return cSrcSuperIntentionalElementCrossReference_0_0; }

		//QualifiedName
		public RuleCall getSrcSuperIntentionalElementQualifiedNameParserRuleCall_0_0_1() { return cSrcSuperIntentionalElementQualifiedNameParserRuleCall_0_0_1; }

		//"contributesTo"
		public Keyword getContributesToKeyword_1() { return cContributesToKeyword_1; }

		//dest+=ContributionEnd
		public Assignment getDestAssignment_2() { return cDestAssignment_2; }

		//ContributionEnd
		public RuleCall getDestContributionEndParserRuleCall_2_0() { return cDestContributionEndParserRuleCall_2_0; }

		//("," dest+=ContributionEnd)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//dest+=ContributionEnd
		public Assignment getDestAssignment_3_1() { return cDestAssignment_3_1; }

		//ContributionEnd
		public RuleCall getDestContributionEndParserRuleCall_3_1_0() { return cDestContributionEndParserRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class NormalDecompositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NormalDecomposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSrcAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSrcSuperIntentionalElementCrossReference_0_0 = (CrossReference)cSrcAssignment_0.eContents().get(0);
		private final RuleCall cSrcSuperIntentionalElementQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cSrcSuperIntentionalElementCrossReference_0_0.eContents().get(1);
		private final Keyword cDecomposedByKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDestAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDestDecompositionEndParserRuleCall_2_0 = (RuleCall)cDestAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDestAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDestDecompositionEndParserRuleCall_3_1_0 = (RuleCall)cDestAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//NormalDecomposition:
		//	src=[SuperIntentionalElement|QualifiedName] "decomposedBy" dest+=DecompositionEnd ("," dest+=DecompositionEnd)* ";";
		public ParserRule getRule() { return rule; }

		//src=[SuperIntentionalElement|QualifiedName] "decomposedBy" dest+=DecompositionEnd ("," dest+=DecompositionEnd)* ";"
		public Group getGroup() { return cGroup; }

		//src=[SuperIntentionalElement|QualifiedName]
		public Assignment getSrcAssignment_0() { return cSrcAssignment_0; }

		//[SuperIntentionalElement|QualifiedName]
		public CrossReference getSrcSuperIntentionalElementCrossReference_0_0() { return cSrcSuperIntentionalElementCrossReference_0_0; }

		//QualifiedName
		public RuleCall getSrcSuperIntentionalElementQualifiedNameParserRuleCall_0_0_1() { return cSrcSuperIntentionalElementQualifiedNameParserRuleCall_0_0_1; }

		//"decomposedBy"
		public Keyword getDecomposedByKeyword_1() { return cDecomposedByKeyword_1; }

		//dest+=DecompositionEnd
		public Assignment getDestAssignment_2() { return cDestAssignment_2; }

		//DecompositionEnd
		public RuleCall getDestDecompositionEndParserRuleCall_2_0() { return cDestDecompositionEndParserRuleCall_2_0; }

		//("," dest+=DecompositionEnd)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//dest+=DecompositionEnd
		public Assignment getDestAssignment_3_1() { return cDestAssignment_3_1; }

		//DecompositionEnd
		public RuleCall getDestDecompositionEndParserRuleCall_3_1_0() { return cDestDecompositionEndParserRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class InLineElementLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InLineElementLink");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInLineDecompositionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInLineContributionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInLineDependencyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInLineLinkParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//InLineElementLink:
		//	InLineDecomposition | InLineContribution | InLineDependency | InLineLink;
		public ParserRule getRule() { return rule; }

		//InLineDecomposition | InLineContribution | InLineDependency | InLineLink
		public Alternatives getAlternatives() { return cAlternatives; }

		//InLineDecomposition
		public RuleCall getInLineDecompositionParserRuleCall_0() { return cInLineDecompositionParserRuleCall_0; }

		//InLineContribution
		public RuleCall getInLineContributionParserRuleCall_1() { return cInLineContributionParserRuleCall_1; }

		//InLineDependency
		public RuleCall getInLineDependencyParserRuleCall_2() { return cInLineDependencyParserRuleCall_2; }

		//InLineLink
		public RuleCall getInLineLinkParserRuleCall_3() { return cInLineLinkParserRuleCall_3; }
	}

	public class InLineLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InLineLink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeLinkTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeLinkTypeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTypeLinkTypeCrossReference_0_0.eContents().get(1);
		private final Assignment cDestAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDestGRLElementCrossReference_1_0 = (CrossReference)cDestAssignment_1.eContents().get(0);
		private final RuleCall cDestGRLElementQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cDestGRLElementCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDestAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cDestGRLElementCrossReference_2_1_0 = (CrossReference)cDestAssignment_2_1.eContents().get(0);
		private final RuleCall cDestGRLElementQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cDestGRLElementCrossReference_2_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InLineLink:
		//	type=[LinkType|QualifiedName] dest+=[GRLElement|QualifiedName] ("," dest+=[GRLElement|QualifiedName])* ";";
		public ParserRule getRule() { return rule; }

		//type=[LinkType|QualifiedName] dest+=[GRLElement|QualifiedName] ("," dest+=[GRLElement|QualifiedName])* ";"
		public Group getGroup() { return cGroup; }

		//type=[LinkType|QualifiedName]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[LinkType|QualifiedName]
		public CrossReference getTypeLinkTypeCrossReference_0_0() { return cTypeLinkTypeCrossReference_0_0; }

		//QualifiedName
		public RuleCall getTypeLinkTypeQualifiedNameParserRuleCall_0_0_1() { return cTypeLinkTypeQualifiedNameParserRuleCall_0_0_1; }

		//dest+=[GRLElement|QualifiedName]
		public Assignment getDestAssignment_1() { return cDestAssignment_1; }

		//[GRLElement|QualifiedName]
		public CrossReference getDestGRLElementCrossReference_1_0() { return cDestGRLElementCrossReference_1_0; }

		//QualifiedName
		public RuleCall getDestGRLElementQualifiedNameParserRuleCall_1_0_1() { return cDestGRLElementQualifiedNameParserRuleCall_1_0_1; }

		//("," dest+=[GRLElement|QualifiedName])*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//dest+=[GRLElement|QualifiedName]
		public Assignment getDestAssignment_2_1() { return cDestAssignment_2_1; }

		//[GRLElement|QualifiedName]
		public CrossReference getDestGRLElementCrossReference_2_1_0() { return cDestGRLElementCrossReference_2_1_0; }

		//QualifiedName
		public RuleCall getDestGRLElementQualifiedNameParserRuleCall_2_1_0_1() { return cDestGRLElementQualifiedNameParserRuleCall_2_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class InLineDependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InLineDependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDependsOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDestAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDestDependencyEndParserRuleCall_1_0 = (RuleCall)cDestAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDestAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDestDependencyEndParserRuleCall_2_1_0 = (RuleCall)cDestAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InLineDependency:
		//	"dependsOn" dest+=DependencyEnd ("," dest+=DependencyEnd)* ";";
		public ParserRule getRule() { return rule; }

		//"dependsOn" dest+=DependencyEnd ("," dest+=DependencyEnd)* ";"
		public Group getGroup() { return cGroup; }

		//"dependsOn"
		public Keyword getDependsOnKeyword_0() { return cDependsOnKeyword_0; }

		//dest+=DependencyEnd
		public Assignment getDestAssignment_1() { return cDestAssignment_1; }

		//DependencyEnd
		public RuleCall getDestDependencyEndParserRuleCall_1_0() { return cDestDependencyEndParserRuleCall_1_0; }

		//("," dest+=DependencyEnd)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//dest+=DependencyEnd
		public Assignment getDestAssignment_2_1() { return cDestAssignment_2_1; }

		//DependencyEnd
		public RuleCall getDestDependencyEndParserRuleCall_2_1_0() { return cDestDependencyEndParserRuleCall_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class InLineContributionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InLineContribution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContributesToKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDestAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDestContributionEndParserRuleCall_1_0 = (RuleCall)cDestAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDestAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDestContributionEndParserRuleCall_2_1_0 = (RuleCall)cDestAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InLineContribution:
		//	"contributesTo" dest+=ContributionEnd ("," dest+=ContributionEnd)* ";";
		public ParserRule getRule() { return rule; }

		//"contributesTo" dest+=ContributionEnd ("," dest+=ContributionEnd)* ";"
		public Group getGroup() { return cGroup; }

		//"contributesTo"
		public Keyword getContributesToKeyword_0() { return cContributesToKeyword_0; }

		//dest+=ContributionEnd
		public Assignment getDestAssignment_1() { return cDestAssignment_1; }

		//ContributionEnd
		public RuleCall getDestContributionEndParserRuleCall_1_0() { return cDestContributionEndParserRuleCall_1_0; }

		//("," dest+=ContributionEnd)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//dest+=ContributionEnd
		public Assignment getDestAssignment_2_1() { return cDestAssignment_2_1; }

		//ContributionEnd
		public RuleCall getDestContributionEndParserRuleCall_2_1_0() { return cDestContributionEndParserRuleCall_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class InLineDecompositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InLineDecomposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDecomposedByKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDestAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDestDecompositionEndParserRuleCall_1_0 = (RuleCall)cDestAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDestAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDestDecompositionEndParserRuleCall_2_1_0 = (RuleCall)cDestAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InLineDecomposition:
		//	"decomposedBy" dest+=DecompositionEnd ("," dest+=DecompositionEnd)* ";";
		public ParserRule getRule() { return rule; }

		//"decomposedBy" dest+=DecompositionEnd ("," dest+=DecompositionEnd)* ";"
		public Group getGroup() { return cGroup; }

		//"decomposedBy"
		public Keyword getDecomposedByKeyword_0() { return cDecomposedByKeyword_0; }

		//dest+=DecompositionEnd
		public Assignment getDestAssignment_1() { return cDestAssignment_1; }

		//DecompositionEnd
		public RuleCall getDestDecompositionEndParserRuleCall_1_0() { return cDestDecompositionEndParserRuleCall_1_0; }

		//("," dest+=DecompositionEnd)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//dest+=DecompositionEnd
		public Assignment getDestAssignment_2_1() { return cDestAssignment_2_1; }

		//DecompositionEnd
		public RuleCall getDestDecompositionEndParserRuleCall_2_1_0() { return cDestDecompositionEndParserRuleCall_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class DecompositionEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DecompositionEnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDecompositionEndAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDestNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDestNameSuperIntentionalElementCrossReference_1_0 = (CrossReference)cDestNameAssignment_1.eContents().get(0);
		private final RuleCall cDestNameSuperIntentionalElementQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cDestNameSuperIntentionalElementCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cDescriptionAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//DecompositionEnd:
		//	{DecompositionEnd} destName=[SuperIntentionalElement|QualifiedName] ("{" description=STRING? "}")?;
		public ParserRule getRule() { return rule; }

		//{DecompositionEnd} destName=[SuperIntentionalElement|QualifiedName] ("{" description=STRING? "}")?
		public Group getGroup() { return cGroup; }

		//{DecompositionEnd}
		public Action getDecompositionEndAction_0() { return cDecompositionEndAction_0; }

		//destName=[SuperIntentionalElement|QualifiedName]
		public Assignment getDestNameAssignment_1() { return cDestNameAssignment_1; }

		//[SuperIntentionalElement|QualifiedName]
		public CrossReference getDestNameSuperIntentionalElementCrossReference_1_0() { return cDestNameSuperIntentionalElementCrossReference_1_0; }

		//QualifiedName
		public RuleCall getDestNameSuperIntentionalElementQualifiedNameParserRuleCall_1_0_1() { return cDestNameSuperIntentionalElementQualifiedNameParserRuleCall_1_0_1; }

		//("{" description=STRING? "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//description=STRING?
		public Assignment getDescriptionAssignment_2_1() { return cDescriptionAssignment_2_1; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_1_0() { return cDescriptionSTRINGTerminalRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class ContributionEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContributionEnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cContributionEndAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDestNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDestNameSuperIntentionalElementCrossReference_1_0 = (CrossReference)cDestNameAssignment_1.eContents().get(0);
		private final RuleCall cDestNameSuperIntentionalElementQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cDestNameSuperIntentionalElementCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2_1 = (UnorderedGroup)cGroup_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cUnorderedGroup_2_1.eContents().get(0);
		private final Keyword cNameKeyword_2_1_0_0 = (Keyword)cGroup_2_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1_0_1 = (Keyword)cGroup_2_1_0.eContents().get(1);
		private final Assignment cNameAssignment_2_1_0_2 = (Assignment)cGroup_2_1_0.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_1_0_2_0 = (RuleCall)cNameAssignment_2_1_0_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_0_3 = (Keyword)cGroup_2_1_0.eContents().get(3);
		private final Group cGroup_2_1_1 = (Group)cUnorderedGroup_2_1.eContents().get(1);
		private final Alternatives cAlternatives_2_1_1_0 = (Alternatives)cGroup_2_1_1.eContents().get(0);
		private final Assignment cContributionAssignment_2_1_1_0_0 = (Assignment)cAlternatives_2_1_1_0.eContents().get(0);
		private final RuleCall cContributionContributionTypeEnumRuleCall_2_1_1_0_0_0 = (RuleCall)cContributionAssignment_2_1_1_0_0.eContents().get(0);
		private final Assignment cQuantitativeContributionAssignment_2_1_1_0_1 = (Assignment)cAlternatives_2_1_1_0.eContents().get(1);
		private final RuleCall cQuantitativeContributionQUALITATIVEVALUETerminalRuleCall_2_1_1_0_1_0 = (RuleCall)cQuantitativeContributionAssignment_2_1_1_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_1 = (Keyword)cGroup_2_1_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//ContributionEnd:
		//	{ContributionEnd} destName=[SuperIntentionalElement|QualifiedName] ("{" (("name" "=" name=ID ";")? &
		//	((contribution=ContributionType | quantitativeContribution=QUALITATIVEVALUE) ";")?) "}")?;
		public ParserRule getRule() { return rule; }

		//{ContributionEnd} destName=[SuperIntentionalElement|QualifiedName] ("{" (("name" "=" name=ID ";")? &
		//((contribution=ContributionType | quantitativeContribution=QUALITATIVEVALUE) ";")?) "}")?
		public Group getGroup() { return cGroup; }

		//{ContributionEnd}
		public Action getContributionEndAction_0() { return cContributionEndAction_0; }

		//destName=[SuperIntentionalElement|QualifiedName]
		public Assignment getDestNameAssignment_1() { return cDestNameAssignment_1; }

		//[SuperIntentionalElement|QualifiedName]
		public CrossReference getDestNameSuperIntentionalElementCrossReference_1_0() { return cDestNameSuperIntentionalElementCrossReference_1_0; }

		//QualifiedName
		public RuleCall getDestNameSuperIntentionalElementQualifiedNameParserRuleCall_1_0_1() { return cDestNameSuperIntentionalElementQualifiedNameParserRuleCall_1_0_1; }

		//("{" (("name" "=" name=ID ";")? & ((contribution=ContributionType | quantitativeContribution=QUALITATIVEVALUE) ";")?)
		//"}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//("name" "=" name=ID ";")? & ((contribution=ContributionType | quantitativeContribution=QUALITATIVEVALUE) ";")?
		public UnorderedGroup getUnorderedGroup_2_1() { return cUnorderedGroup_2_1; }

		//("name" "=" name=ID ";")?
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }

		//"name"
		public Keyword getNameKeyword_2_1_0_0() { return cNameKeyword_2_1_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1_0_1() { return cEqualsSignKeyword_2_1_0_1; }

		//name=ID
		public Assignment getNameAssignment_2_1_0_2() { return cNameAssignment_2_1_0_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_0_2_0() { return cNameIDTerminalRuleCall_2_1_0_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_0_3() { return cSemicolonKeyword_2_1_0_3; }

		//((contribution=ContributionType | quantitativeContribution=QUALITATIVEVALUE) ";")?
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//contribution=ContributionType | quantitativeContribution=QUALITATIVEVALUE
		public Alternatives getAlternatives_2_1_1_0() { return cAlternatives_2_1_1_0; }

		//contribution=ContributionType
		public Assignment getContributionAssignment_2_1_1_0_0() { return cContributionAssignment_2_1_1_0_0; }

		//ContributionType
		public RuleCall getContributionContributionTypeEnumRuleCall_2_1_1_0_0_0() { return cContributionContributionTypeEnumRuleCall_2_1_1_0_0_0; }

		//quantitativeContribution=QUALITATIVEVALUE
		public Assignment getQuantitativeContributionAssignment_2_1_1_0_1() { return cQuantitativeContributionAssignment_2_1_1_0_1; }

		//QUALITATIVEVALUE
		public RuleCall getQuantitativeContributionQUALITATIVEVALUETerminalRuleCall_2_1_1_0_1_0() { return cQuantitativeContributionQUALITATIVEVALUETerminalRuleCall_2_1_1_0_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1_1() { return cSemicolonKeyword_2_1_1_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class DependencyEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DependencyEnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDependencyEndAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDestNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDestNameSuperIntentionalElementCrossReference_1_0 = (CrossReference)cDestNameAssignment_1.eContents().get(0);
		private final RuleCall cDestNameSuperIntentionalElementQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cDestNameSuperIntentionalElementCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cDescriptionAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//DependencyEnd:
		//	{DependencyEnd} destName=[SuperIntentionalElement|QualifiedName] ("{" description=STRING? "}")?;
		public ParserRule getRule() { return rule; }

		//{DependencyEnd} destName=[SuperIntentionalElement|QualifiedName] ("{" description=STRING? "}")?
		public Group getGroup() { return cGroup; }

		//{DependencyEnd}
		public Action getDependencyEndAction_0() { return cDependencyEndAction_0; }

		//destName=[SuperIntentionalElement|QualifiedName]
		public Assignment getDestNameAssignment_1() { return cDestNameAssignment_1; }

		//[SuperIntentionalElement|QualifiedName]
		public CrossReference getDestNameSuperIntentionalElementCrossReference_1_0() { return cDestNameSuperIntentionalElementCrossReference_1_0; }

		//QualifiedName
		public RuleCall getDestNameSuperIntentionalElementQualifiedNameParserRuleCall_1_0_1() { return cDestNameSuperIntentionalElementQualifiedNameParserRuleCall_1_0_1; }

		//("{" description=STRING? "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//description=STRING?
		public Assignment getDescriptionAssignment_2_1() { return cDescriptionAssignment_2_1; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_1_0() { return cDescriptionSTRINGTerminalRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class LinkTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LinkType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//LinkType:
		//	"link" name=ID ";";
		public ParserRule getRule() { return rule; }

		//"link" name=ID ";"
		public Group getGroup() { return cGroup; }

		//"link"
		public Keyword getLinkKeyword_0() { return cLinkKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class StrategyGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StrategyGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStrategyGroupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIncludesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cStrategiesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cStrategiesEvaluationStrategyCrossReference_2_1_0 = (CrossReference)cStrategiesAssignment_2_1.eContents().get(0);
		private final RuleCall cStrategiesEvaluationStrategyQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cStrategiesEvaluationStrategyCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cStrategiesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cStrategiesEvaluationStrategyCrossReference_2_2_1_0 = (CrossReference)cStrategiesAssignment_2_2_1.eContents().get(0);
		private final RuleCall cStrategiesEvaluationStrategyQualifiedNameParserRuleCall_2_2_1_0_1 = (RuleCall)cStrategiesEvaluationStrategyCrossReference_2_2_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// *******************************************Strategy*******************************************
		//StrategyGroup:
		//	"strategyGroup" name=ID ("includes" strategies+=[EvaluationStrategy|QualifiedName] (","
		//	strategies+=[EvaluationStrategy|QualifiedName])*)? ";";
		public ParserRule getRule() { return rule; }

		//"strategyGroup" name=ID ("includes" strategies+=[EvaluationStrategy|QualifiedName] (","
		//strategies+=[EvaluationStrategy|QualifiedName])*)? ";"
		public Group getGroup() { return cGroup; }

		//"strategyGroup"
		public Keyword getStrategyGroupKeyword_0() { return cStrategyGroupKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("includes" strategies+=[EvaluationStrategy|QualifiedName] ("," strategies+=[EvaluationStrategy|QualifiedName])*)?
		public Group getGroup_2() { return cGroup_2; }

		//"includes"
		public Keyword getIncludesKeyword_2_0() { return cIncludesKeyword_2_0; }

		//strategies+=[EvaluationStrategy|QualifiedName]
		public Assignment getStrategiesAssignment_2_1() { return cStrategiesAssignment_2_1; }

		//[EvaluationStrategy|QualifiedName]
		public CrossReference getStrategiesEvaluationStrategyCrossReference_2_1_0() { return cStrategiesEvaluationStrategyCrossReference_2_1_0; }

		//QualifiedName
		public RuleCall getStrategiesEvaluationStrategyQualifiedNameParserRuleCall_2_1_0_1() { return cStrategiesEvaluationStrategyQualifiedNameParserRuleCall_2_1_0_1; }

		//("," strategies+=[EvaluationStrategy|QualifiedName])*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//strategies+=[EvaluationStrategy|QualifiedName]
		public Assignment getStrategiesAssignment_2_2_1() { return cStrategiesAssignment_2_2_1; }

		//[EvaluationStrategy|QualifiedName]
		public CrossReference getStrategiesEvaluationStrategyCrossReference_2_2_1_0() { return cStrategiesEvaluationStrategyCrossReference_2_2_1_0; }

		//QualifiedName
		public RuleCall getStrategiesEvaluationStrategyQualifiedNameParserRuleCall_2_2_1_0_1() { return cStrategiesEvaluationStrategyQualifiedNameParserRuleCall_2_2_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class EvaluationStrategyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EvaluationStrategy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStrategyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperStrategiesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperStrategiesEvaluationStrategyCrossReference_2_1_0 = (CrossReference)cSuperStrategiesAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperStrategiesEvaluationStrategyQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cSuperStrategiesEvaluationStrategyCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cSuperStrategiesAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cSuperStrategiesEvaluationStrategyCrossReference_2_2_1_0 = (CrossReference)cSuperStrategiesAssignment_2_2_1.eContents().get(0);
		private final RuleCall cSuperStrategiesEvaluationStrategyQualifiedNameParserRuleCall_2_2_1_0_1 = (RuleCall)cSuperStrategiesEvaluationStrategyCrossReference_2_2_1_0.eContents().get(1);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3_0_1 = (UnorderedGroup)cGroup_3_0.eContents().get(1);
		private final Assignment cMetaDataAssignment_3_0_1_0 = (Assignment)cUnorderedGroup_3_0_1.eContents().get(0);
		private final RuleCall cMetaDataMetadataParserRuleCall_3_0_1_0_0 = (RuleCall)cMetaDataAssignment_3_0_1_0.eContents().get(0);
		private final Assignment cEvaluationsAssignment_3_0_1_1 = (Assignment)cUnorderedGroup_3_0_1.eContents().get(1);
		private final RuleCall cEvaluationsEvaluationParserRuleCall_3_0_1_1_0 = (RuleCall)cEvaluationsAssignment_3_0_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		
		//EvaluationStrategy:
		//	"strategy" name=ID ("extends" superStrategies+=[EvaluationStrategy|QualifiedName] (","
		//	superStrategies+=[EvaluationStrategy|QualifiedName])*)? ("{" (metaData+=Metadata* & evaluations+=Evaluation*) "}" |
		//	";");
		public ParserRule getRule() { return rule; }

		//"strategy" name=ID ("extends" superStrategies+=[EvaluationStrategy|QualifiedName] (","
		//superStrategies+=[EvaluationStrategy|QualifiedName])*)? ("{" (metaData+=Metadata* & evaluations+=Evaluation*) "}" |
		//";")
		public Group getGroup() { return cGroup; }

		//"strategy"
		public Keyword getStrategyKeyword_0() { return cStrategyKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("extends" superStrategies+=[EvaluationStrategy|QualifiedName] (","
		//superStrategies+=[EvaluationStrategy|QualifiedName])*)?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//superStrategies+=[EvaluationStrategy|QualifiedName]
		public Assignment getSuperStrategiesAssignment_2_1() { return cSuperStrategiesAssignment_2_1; }

		//[EvaluationStrategy|QualifiedName]
		public CrossReference getSuperStrategiesEvaluationStrategyCrossReference_2_1_0() { return cSuperStrategiesEvaluationStrategyCrossReference_2_1_0; }

		//QualifiedName
		public RuleCall getSuperStrategiesEvaluationStrategyQualifiedNameParserRuleCall_2_1_0_1() { return cSuperStrategiesEvaluationStrategyQualifiedNameParserRuleCall_2_1_0_1; }

		//("," superStrategies+=[EvaluationStrategy|QualifiedName])*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//superStrategies+=[EvaluationStrategy|QualifiedName]
		public Assignment getSuperStrategiesAssignment_2_2_1() { return cSuperStrategiesAssignment_2_2_1; }

		//[EvaluationStrategy|QualifiedName]
		public CrossReference getSuperStrategiesEvaluationStrategyCrossReference_2_2_1_0() { return cSuperStrategiesEvaluationStrategyCrossReference_2_2_1_0; }

		//QualifiedName
		public RuleCall getSuperStrategiesEvaluationStrategyQualifiedNameParserRuleCall_2_2_1_0_1() { return cSuperStrategiesEvaluationStrategyQualifiedNameParserRuleCall_2_2_1_0_1; }

		//"{" (metaData+=Metadata* & evaluations+=Evaluation*) "}" | ";"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//"{" (metaData+=Metadata* & evaluations+=Evaluation*) "}"
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0_0() { return cLeftCurlyBracketKeyword_3_0_0; }

		//metaData+=Metadata* & evaluations+=Evaluation*
		public UnorderedGroup getUnorderedGroup_3_0_1() { return cUnorderedGroup_3_0_1; }

		//metaData+=Metadata*
		public Assignment getMetaDataAssignment_3_0_1_0() { return cMetaDataAssignment_3_0_1_0; }

		//Metadata
		public RuleCall getMetaDataMetadataParserRuleCall_3_0_1_0_0() { return cMetaDataMetadataParserRuleCall_3_0_1_0_0; }

		//evaluations+=Evaluation*
		public Assignment getEvaluationsAssignment_3_0_1_1() { return cEvaluationsAssignment_3_0_1_1; }

		//Evaluation
		public RuleCall getEvaluationsEvaluationParserRuleCall_3_0_1_1_0() { return cEvaluationsEvaluationParserRuleCall_3_0_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_0_2() { return cRightCurlyBracketKeyword_3_0_2; }

		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
	}

	public class EvaluationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Evaluation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIntentionalElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cIntentionalElementSuperIntentionalElementCrossReference_0_0 = (CrossReference)cIntentionalElementAssignment_0.eContents().get(0);
		private final RuleCall cIntentionalElementSuperIntentionalElementQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cIntentionalElementSuperIntentionalElementCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Alternatives cAlternatives_2_0_0 = (Alternatives)cGroup_2_0.eContents().get(0);
		private final Assignment cQualitativeEvaluationAssignment_2_0_0_0 = (Assignment)cAlternatives_2_0_0.eContents().get(0);
		private final RuleCall cQualitativeEvaluationQualitativeLabelEnumRuleCall_2_0_0_0_0 = (RuleCall)cQualitativeEvaluationAssignment_2_0_0_0.eContents().get(0);
		private final Assignment cEvaluationAssignment_2_0_0_1 = (Assignment)cAlternatives_2_0_0.eContents().get(1);
		private final RuleCall cEvaluationQUALITATIVEVALUETerminalRuleCall_2_0_0_1_0 = (RuleCall)cEvaluationAssignment_2_0_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2_1_1 = (UnorderedGroup)cGroup_2_1.eContents().get(1);
		private final Group cGroup_2_1_1_0 = (Group)cUnorderedGroup_2_1_1.eContents().get(0);
		private final Assignment cExceedsAssignment_2_1_1_0_0 = (Assignment)cGroup_2_1_1_0.eContents().get(0);
		private final Keyword cExceedsExceedsKeyword_2_1_1_0_0_0 = (Keyword)cExceedsAssignment_2_1_1_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1_0_1 = (Keyword)cGroup_2_1_1_0.eContents().get(1);
		private final Assignment cEvalRangeAssignment_2_1_1_1 = (Assignment)cUnorderedGroup_2_1_1.eContents().get(1);
		private final RuleCall cEvalRangeEvaluationRangeParserRuleCall_2_1_1_1_0 = (RuleCall)cEvalRangeAssignment_2_1_1_1.eContents().get(0);
		private final Assignment cKpiEvalValueSetAssignment_2_1_1_2 = (Assignment)cUnorderedGroup_2_1_1.eContents().get(2);
		private final RuleCall cKpiEvalValueSetKPIEvalValueSetParserRuleCall_2_1_1_2_0 = (RuleCall)cKpiEvalValueSetAssignment_2_1_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//Evaluation: / *
		//	 *TODO I must give a default value for evaluation, which is zero, to this attribute.
		//	 * 		This can be done through the post processing mechanism in xText 
		//	 * / intentionalElement=[SuperIntentionalElement|QualifiedName] "=" ((qualitativeEvaluation=QualitativeLabel |
		//	evaluation=QUALITATIVEVALUE) ";" | "{" ((exceeds?="exceeds" ";")? & evalRange=EvaluationRange? &
		//	kpiEvalValueSet=KPIEvalValueSet?) "}");
		public ParserRule getRule() { return rule; }

		/// *
		//	 *TODO I must give a default value for evaluation, which is zero, to this attribute.
		//	 * 		This can be done through the post processing mechanism in xText 
		//	 * / intentionalElement=[SuperIntentionalElement|QualifiedName] "=" ((qualitativeEvaluation=QualitativeLabel |
		//evaluation=QUALITATIVEVALUE) ";" | "{" ((exceeds?="exceeds" ";")? & evalRange=EvaluationRange? &
		//kpiEvalValueSet=KPIEvalValueSet?) "}")
		public Group getGroup() { return cGroup; }

		/// *
		//	 *TODO I must give a default value for evaluation, which is zero, to this attribute.
		//	 * 		This can be done through the post processing mechanism in xText 
		//	 * / intentionalElement=[SuperIntentionalElement|QualifiedName]
		public Assignment getIntentionalElementAssignment_0() { return cIntentionalElementAssignment_0; }

		//[SuperIntentionalElement|QualifiedName]
		public CrossReference getIntentionalElementSuperIntentionalElementCrossReference_0_0() { return cIntentionalElementSuperIntentionalElementCrossReference_0_0; }

		//QualifiedName
		public RuleCall getIntentionalElementSuperIntentionalElementQualifiedNameParserRuleCall_0_0_1() { return cIntentionalElementSuperIntentionalElementQualifiedNameParserRuleCall_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//(qualitativeEvaluation=QualitativeLabel | evaluation=QUALITATIVEVALUE) ";" | "{" ((exceeds?="exceeds" ";")? &
		//evalRange=EvaluationRange? & kpiEvalValueSet=KPIEvalValueSet?) "}"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//(qualitativeEvaluation=QualitativeLabel | evaluation=QUALITATIVEVALUE) ";"
		public Group getGroup_2_0() { return cGroup_2_0; }

		//qualitativeEvaluation=QualitativeLabel | evaluation=QUALITATIVEVALUE
		public Alternatives getAlternatives_2_0_0() { return cAlternatives_2_0_0; }

		//qualitativeEvaluation=QualitativeLabel
		public Assignment getQualitativeEvaluationAssignment_2_0_0_0() { return cQualitativeEvaluationAssignment_2_0_0_0; }

		//QualitativeLabel
		public RuleCall getQualitativeEvaluationQualitativeLabelEnumRuleCall_2_0_0_0_0() { return cQualitativeEvaluationQualitativeLabelEnumRuleCall_2_0_0_0_0; }

		//evaluation=QUALITATIVEVALUE
		public Assignment getEvaluationAssignment_2_0_0_1() { return cEvaluationAssignment_2_0_0_1; }

		//QUALITATIVEVALUE
		public RuleCall getEvaluationQUALITATIVEVALUETerminalRuleCall_2_0_0_1_0() { return cEvaluationQUALITATIVEVALUETerminalRuleCall_2_0_0_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2_0_1() { return cSemicolonKeyword_2_0_1; }

		//"{" ((exceeds?="exceeds" ";")? & evalRange=EvaluationRange? & kpiEvalValueSet=KPIEvalValueSet?) "}"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }

		//(exceeds?="exceeds" ";")? & evalRange=EvaluationRange? & kpiEvalValueSet=KPIEvalValueSet?
		public UnorderedGroup getUnorderedGroup_2_1_1() { return cUnorderedGroup_2_1_1; }

		//(exceeds?="exceeds" ";")?
		public Group getGroup_2_1_1_0() { return cGroup_2_1_1_0; }

		//exceeds?="exceeds"
		public Assignment getExceedsAssignment_2_1_1_0_0() { return cExceedsAssignment_2_1_1_0_0; }

		//"exceeds"
		public Keyword getExceedsExceedsKeyword_2_1_1_0_0_0() { return cExceedsExceedsKeyword_2_1_1_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1_0_1() { return cSemicolonKeyword_2_1_1_0_1; }

		//evalRange=EvaluationRange?
		public Assignment getEvalRangeAssignment_2_1_1_1() { return cEvalRangeAssignment_2_1_1_1; }

		//EvaluationRange
		public RuleCall getEvalRangeEvaluationRangeParserRuleCall_2_1_1_1_0() { return cEvalRangeEvaluationRangeParserRuleCall_2_1_1_1_0; }

		//kpiEvalValueSet=KPIEvalValueSet?
		public Assignment getKpiEvalValueSetAssignment_2_1_1_2() { return cKpiEvalValueSetAssignment_2_1_1_2; }

		//KPIEvalValueSet
		public RuleCall getKpiEvalValueSetKPIEvalValueSetParserRuleCall_2_1_1_2_0() { return cKpiEvalValueSetKPIEvalValueSetParserRuleCall_2_1_1_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}

	public class EvaluationRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EvaluationRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cStartKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cStartAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cStartQUALITATIVEVALUETerminalRuleCall_0_2_0 = (RuleCall)cStartAssignment_0_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cEndAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cEndQUALITATIVEVALUETerminalRuleCall_1_2_0 = (RuleCall)cEndAssignment_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cStepKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cStepAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cStepQUALITATIVEVALUETerminalRuleCall_2_2_0 = (RuleCall)cStepAssignment_2_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//EvaluationRange:
		//	("start" "=" start=QUALITATIVEVALUE ";") ("end" "=" end=QUALITATIVEVALUE ";") / *
		//	 *TODO I must give a default value, which is 1, to this attribute.
		//	 * 		This can be done through the post processing mechanism in xText 
		//	 * / ("step" "=" step=QUALITATIVEVALUE ";");
		public ParserRule getRule() { return rule; }

		//("start" "=" start=QUALITATIVEVALUE ";") ("end" "=" end=QUALITATIVEVALUE ";") / *
		//	 *TODO I must give a default value, which is 1, to this attribute.
		//	 * 		This can be done through the post processing mechanism in xText 
		//	 * / ("step" "=" step=QUALITATIVEVALUE ";")
		public Group getGroup() { return cGroup; }

		//"start" "=" start=QUALITATIVEVALUE ";"
		public Group getGroup_0() { return cGroup_0; }

		//"start"
		public Keyword getStartKeyword_0_0() { return cStartKeyword_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//start=QUALITATIVEVALUE
		public Assignment getStartAssignment_0_2() { return cStartAssignment_0_2; }

		//QUALITATIVEVALUE
		public RuleCall getStartQUALITATIVEVALUETerminalRuleCall_0_2_0() { return cStartQUALITATIVEVALUETerminalRuleCall_0_2_0; }

		//";"
		public Keyword getSemicolonKeyword_0_3() { return cSemicolonKeyword_0_3; }

		//"end" "=" end=QUALITATIVEVALUE ";"
		public Group getGroup_1() { return cGroup_1; }

		//"end"
		public Keyword getEndKeyword_1_0() { return cEndKeyword_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }

		//end=QUALITATIVEVALUE
		public Assignment getEndAssignment_1_2() { return cEndAssignment_1_2; }

		//QUALITATIVEVALUE
		public RuleCall getEndQUALITATIVEVALUETerminalRuleCall_1_2_0() { return cEndQUALITATIVEVALUETerminalRuleCall_1_2_0; }

		//";"
		public Keyword getSemicolonKeyword_1_3() { return cSemicolonKeyword_1_3; }

		//"step" "=" step=QUALITATIVEVALUE ";"
		public Group getGroup_2() { return cGroup_2; }

		//"step"
		public Keyword getStepKeyword_2_0() { return cStepKeyword_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }

		//step=QUALITATIVEVALUE
		public Assignment getStepAssignment_2_2() { return cStepAssignment_2_2; }

		//QUALITATIVEVALUE
		public RuleCall getStepQUALITATIVEVALUETerminalRuleCall_2_2_0() { return cStepQUALITATIVEVALUETerminalRuleCall_2_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_3() { return cSemicolonKeyword_2_3; }
	}

	public class KPIEvalValueSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KPIEvalValueSet");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cKPIQuantitativeEvalValueSetParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cKPIQualitativeEvalValueSetParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// **************************************************************************************
		//KPIEvalValueSet:
		//	KPIQuantitativeEvalValueSet | KPIQualitativeEvalValueSet;
		public ParserRule getRule() { return rule; }

		//KPIQuantitativeEvalValueSet | KPIQualitativeEvalValueSet
		public Alternatives getAlternatives() { return cAlternatives; }

		//KPIQuantitativeEvalValueSet
		public RuleCall getKPIQuantitativeEvalValueSetParserRuleCall_0() { return cKPIQuantitativeEvalValueSetParserRuleCall_0; }

		//KPIQualitativeEvalValueSet
		public RuleCall getKPIQualitativeEvalValueSetParserRuleCall_1() { return cKPIQualitativeEvalValueSetParserRuleCall_1; }
	}

	public class KPIQuantitativeEvalValueSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KPIQuantitativeEvalValueSet");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cTargetKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cTargetValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cTargetValueDOUBLETerminalRuleCall_0_2_0 = (RuleCall)cTargetValueAssignment_0_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Keyword cThresholdKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cThresholdValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cThresholdValueDOUBLETerminalRuleCall_1_2_0 = (RuleCall)cThresholdValueAssignment_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cUnorderedGroup.eContents().get(2);
		private final Keyword cWorstKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cWorstValueAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cWorstValueDOUBLETerminalRuleCall_2_2_0 = (RuleCall)cWorstValueAssignment_2_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cUnorderedGroup.eContents().get(3);
		private final Keyword cEvalKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cEvaluationValueAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cEvaluationValueDOUBLETerminalRuleCall_3_2_0 = (RuleCall)cEvaluationValueAssignment_3_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cUnorderedGroup.eContents().get(4);
		private final Keyword cUnitKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cUnitAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cUnitSTRINGTerminalRuleCall_4_2_0 = (RuleCall)cUnitAssignment_4_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//KPIQuantitativeEvalValueSet:
		//	"target" "=" targetValue=DOUBLE ";" / *
		//	 *TODO I must give a default value, which is 0, to this attribute.
		//	 * 		This can be done through the post processing mechanism in xText 
		//	 * / / *
		//	 *TODO I must give a default value, which is 0, to this attribute.
		//	 * 		This can be done through the post processing mechanism in xText 
		//	 * / / *
		//	 *TODO I must give a default value, which is 0, to this attribute.
		//	 * 		This can be done through the post processing mechanism in xText 
		//	 * / / *
		//	 *TODO I must give a default value, which is 0, to this attribute.
		//	 * 		This can be done through the post processing mechanism in xText 
		//	 * / & "threshold" "=" thresholdValue=DOUBLE ";" & "worst" "=" worstValue=DOUBLE ";" & "eval" "=" evaluationValue=DOUBLE
		//	";" & "unit" "=" unit=STRING ";";
		public ParserRule getRule() { return rule; }

		//"target" "=" targetValue=DOUBLE ";" / *
		//	 *TODO I must give a default value, which is 0, to this attribute.
		//	 * 		This can be done through the post processing mechanism in xText 
		//	 * / / *
		//	 *TODO I must give a default value, which is 0, to this attribute.
		//	 * 		This can be done through the post processing mechanism in xText 
		//	 * / / *
		//	 *TODO I must give a default value, which is 0, to this attribute.
		//	 * 		This can be done through the post processing mechanism in xText 
		//	 * / / *
		//	 *TODO I must give a default value, which is 0, to this attribute.
		//	 * 		This can be done through the post processing mechanism in xText 
		//	 * / & "threshold" "=" thresholdValue=DOUBLE ";" & "worst" "=" worstValue=DOUBLE ";" & "eval" "=" evaluationValue=DOUBLE
		//";" & "unit" "=" unit=STRING ";"
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//"target" "=" targetValue=DOUBLE ";"
		public Group getGroup_0() { return cGroup_0; }

		//"target"
		public Keyword getTargetKeyword_0_0() { return cTargetKeyword_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//targetValue=DOUBLE
		public Assignment getTargetValueAssignment_0_2() { return cTargetValueAssignment_0_2; }

		//DOUBLE
		public RuleCall getTargetValueDOUBLETerminalRuleCall_0_2_0() { return cTargetValueDOUBLETerminalRuleCall_0_2_0; }

		//";"
		public Keyword getSemicolonKeyword_0_3() { return cSemicolonKeyword_0_3; }

		//"threshold" "=" thresholdValue=DOUBLE ";"
		public Group getGroup_1() { return cGroup_1; }

		//"threshold"
		public Keyword getThresholdKeyword_1_0() { return cThresholdKeyword_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }

		//thresholdValue=DOUBLE
		public Assignment getThresholdValueAssignment_1_2() { return cThresholdValueAssignment_1_2; }

		//DOUBLE
		public RuleCall getThresholdValueDOUBLETerminalRuleCall_1_2_0() { return cThresholdValueDOUBLETerminalRuleCall_1_2_0; }

		//";"
		public Keyword getSemicolonKeyword_1_3() { return cSemicolonKeyword_1_3; }

		//"worst" "=" worstValue=DOUBLE ";"
		public Group getGroup_2() { return cGroup_2; }

		//"worst"
		public Keyword getWorstKeyword_2_0() { return cWorstKeyword_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }

		//worstValue=DOUBLE
		public Assignment getWorstValueAssignment_2_2() { return cWorstValueAssignment_2_2; }

		//DOUBLE
		public RuleCall getWorstValueDOUBLETerminalRuleCall_2_2_0() { return cWorstValueDOUBLETerminalRuleCall_2_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_3() { return cSemicolonKeyword_2_3; }

		//"eval" "=" evaluationValue=DOUBLE ";"
		public Group getGroup_3() { return cGroup_3; }

		//"eval"
		public Keyword getEvalKeyword_3_0() { return cEvalKeyword_3_0; }

		//"="
		public Keyword getEqualsSignKeyword_3_1() { return cEqualsSignKeyword_3_1; }

		//evaluationValue=DOUBLE
		public Assignment getEvaluationValueAssignment_3_2() { return cEvaluationValueAssignment_3_2; }

		//DOUBLE
		public RuleCall getEvaluationValueDOUBLETerminalRuleCall_3_2_0() { return cEvaluationValueDOUBLETerminalRuleCall_3_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3_3() { return cSemicolonKeyword_3_3; }

		//"unit" "=" unit=STRING ";"
		public Group getGroup_4() { return cGroup_4; }

		//"unit"
		public Keyword getUnitKeyword_4_0() { return cUnitKeyword_4_0; }

		//"="
		public Keyword getEqualsSignKeyword_4_1() { return cEqualsSignKeyword_4_1; }

		//unit=STRING
		public Assignment getUnitAssignment_4_2() { return cUnitAssignment_4_2; }

		//STRING
		public RuleCall getUnitSTRINGTerminalRuleCall_4_2_0() { return cUnitSTRINGTerminalRuleCall_4_2_0; }

		//";"
		public Keyword getSemicolonKeyword_4_3() { return cSemicolonKeyword_4_3; }
	}

	public class KPIQualitativeEvalValueSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KPIQualitativeEvalValueSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQualevalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cQualitativeEvaluationValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cQualitativeEvaluationValueMappingCrossReference_2_0 = (CrossReference)cQualitativeEvaluationValueAssignment_2.eContents().get(0);
		private final RuleCall cQualitativeEvaluationValueMappingQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cQualitativeEvaluationValueMappingCrossReference_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//KPIQualitativeEvalValueSet:
		//	"qualeval" "=" qualitativeEvaluationValue=[Mapping|QualifiedName] ";";
		public ParserRule getRule() { return rule; }

		//"qualeval" "=" qualitativeEvaluationValue=[Mapping|QualifiedName] ";"
		public Group getGroup() { return cGroup; }

		//"qualeval"
		public Keyword getQualevalKeyword_0() { return cQualevalKeyword_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//qualitativeEvaluationValue=[Mapping|QualifiedName]
		public Assignment getQualitativeEvaluationValueAssignment_2() { return cQualitativeEvaluationValueAssignment_2; }

		//[Mapping|QualifiedName]
		public CrossReference getQualitativeEvaluationValueMappingCrossReference_2_0() { return cQualitativeEvaluationValueMappingCrossReference_2_0; }

		//QualifiedName
		public RuleCall getQualitativeEvaluationValueMappingQualifiedNameParserRuleCall_2_0_1() { return cQualitativeEvaluationValueMappingQualifiedNameParserRuleCall_2_0_1; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class QualitativeMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualitativeMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQualitativeMappingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Assignment cMetaDataAssignment_3_0 = (Assignment)cUnorderedGroup_3.eContents().get(0);
		private final RuleCall cMetaDataMetadataParserRuleCall_3_0_0 = (RuleCall)cMetaDataAssignment_3_0.eContents().get(0);
		private final Assignment cMappingsAssignment_3_1 = (Assignment)cUnorderedGroup_3.eContents().get(1);
		private final RuleCall cMappingsMappingParserRuleCall_3_1_0 = (RuleCall)cMappingsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//QualitativeMapping:
		//	"qualitativeMapping" name=ID "{" (metaData+=Metadata* & mappings+=Mapping*) "}";
		public ParserRule getRule() { return rule; }

		//"qualitativeMapping" name=ID "{" (metaData+=Metadata* & mappings+=Mapping*) "}"
		public Group getGroup() { return cGroup; }

		//"qualitativeMapping"
		public Keyword getQualitativeMappingKeyword_0() { return cQualitativeMappingKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//metaData+=Metadata* & mappings+=Mapping*
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//metaData+=Metadata*
		public Assignment getMetaDataAssignment_3_0() { return cMetaDataAssignment_3_0; }

		//Metadata
		public RuleCall getMetaDataMetadataParserRuleCall_3_0_0() { return cMetaDataMetadataParserRuleCall_3_0_0; }

		//mappings+=Mapping*
		public Assignment getMappingsAssignment_3_1() { return cMappingsAssignment_3_1; }

		//Mapping
		public RuleCall getMappingsMappingParserRuleCall_3_1_0() { return cMappingsMappingParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class MappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEvaluationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEvaluationQUALITATIVEVALUETerminalRuleCall_2_0 = (RuleCall)cEvaluationAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cQualitativeEvaluationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cQualitativeEvaluationQualitativeLabelEnumRuleCall_4_0 = (RuleCall)cQualitativeEvaluationAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cExceedsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cExceedsBooleanEnumRuleCall_5_1_0 = (RuleCall)cExceedsAssignment_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Mapping:
		//	name=STRING "," evaluation=QUALITATIVEVALUE "," qualitativeEvaluation=QualitativeLabel ("," exceeds=Boolean)? ";";
		public ParserRule getRule() { return rule; }

		//name=STRING "," evaluation=QUALITATIVEVALUE "," qualitativeEvaluation=QualitativeLabel ("," exceeds=Boolean)? ";"
		public Group getGroup() { return cGroup; }

		//name=STRING
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0() { return cNameSTRINGTerminalRuleCall_0_0; }

		//","
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }

		//evaluation=QUALITATIVEVALUE
		public Assignment getEvaluationAssignment_2() { return cEvaluationAssignment_2; }

		//QUALITATIVEVALUE
		public RuleCall getEvaluationQUALITATIVEVALUETerminalRuleCall_2_0() { return cEvaluationQUALITATIVEVALUETerminalRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//qualitativeEvaluation=QualitativeLabel
		public Assignment getQualitativeEvaluationAssignment_4() { return cQualitativeEvaluationAssignment_4; }

		//QualitativeLabel
		public RuleCall getQualitativeEvaluationQualitativeLabelEnumRuleCall_4_0() { return cQualitativeEvaluationQualitativeLabelEnumRuleCall_4_0; }

		//("," exceeds=Boolean)?
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//exceeds=Boolean
		public Assignment getExceedsAssignment_5_1() { return cExceedsAssignment_5_1; }

		//Boolean
		public RuleCall getExceedsBooleanEnumRuleCall_5_1_0() { return cExceedsBooleanEnumRuleCall_5_1_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class ContributionGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContributionGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContributionGroupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIncludesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContribsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cContribsContributionContextCrossReference_3_0 = (CrossReference)cContribsAssignment_3.eContents().get(0);
		private final RuleCall cContribsContributionContextIDTerminalRuleCall_3_0_1 = (RuleCall)cContribsContributionContextCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cContribsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cContribsContributionContextCrossReference_4_1_0 = (CrossReference)cContribsAssignment_4_1.eContents().get(0);
		private final RuleCall cContribsContributionContextIDTerminalRuleCall_4_1_0_1 = (RuleCall)cContribsContributionContextCrossReference_4_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		/// ********************************************************************************************
		// * Looks unnecessary 
		// * / ContributionGroup:
		//	"contributionGroup" name=ID "includes" contribs+=[ContributionContext] ("," contribs+=[ContributionContext])* ";";
		public ParserRule getRule() { return rule; }

		//"contributionGroup" name=ID "includes" contribs+=[ContributionContext] ("," contribs+=[ContributionContext])* ";"
		public Group getGroup() { return cGroup; }

		//"contributionGroup"
		public Keyword getContributionGroupKeyword_0() { return cContributionGroupKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"includes"
		public Keyword getIncludesKeyword_2() { return cIncludesKeyword_2; }

		//contribs+=[ContributionContext]
		public Assignment getContribsAssignment_3() { return cContribsAssignment_3; }

		//[ContributionContext]
		public CrossReference getContribsContributionContextCrossReference_3_0() { return cContribsContributionContextCrossReference_3_0; }

		//ID
		public RuleCall getContribsContributionContextIDTerminalRuleCall_3_0_1() { return cContribsContributionContextIDTerminalRuleCall_3_0_1; }

		//("," contribs+=[ContributionContext])*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//contribs+=[ContributionContext]
		public Assignment getContribsAssignment_4_1() { return cContribsAssignment_4_1; }

		//[ContributionContext]
		public CrossReference getContribsContributionContextCrossReference_4_1_0() { return cContribsContributionContextCrossReference_4_1_0; }

		//ID
		public RuleCall getContribsContributionContextIDTerminalRuleCall_4_1_0_1() { return cContribsContributionContextIDTerminalRuleCall_4_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class ContributionContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContributionContext");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContributionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperContributionContextsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperContributionContextsContributionContextCrossReference_2_1_0 = (CrossReference)cSuperContributionContextsAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperContributionContextsContributionContextQualifiedNameParserRuleCall_2_1_0_1 = (RuleCall)cSuperContributionContextsContributionContextCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cSuperContributionContextsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final CrossReference cSuperContributionContextsContributionContextCrossReference_2_2_1_0 = (CrossReference)cSuperContributionContextsAssignment_2_2_1.eContents().get(0);
		private final RuleCall cSuperContributionContextsContributionContextQualifiedNameParserRuleCall_2_2_1_0_1 = (RuleCall)cSuperContributionContextsContributionContextCrossReference_2_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final UnorderedGroup cUnorderedGroup_4 = (UnorderedGroup)cGroup.eContents().get(4);
		private final Assignment cMetaDataAssignment_4_0 = (Assignment)cUnorderedGroup_4.eContents().get(0);
		private final RuleCall cMetaDataMetadataParserRuleCall_4_0_0 = (RuleCall)cMetaDataAssignment_4_0.eContents().get(0);
		private final Assignment cChangesAssignment_4_1 = (Assignment)cUnorderedGroup_4.eContents().get(1);
		private final RuleCall cChangesContributionChangeParserRuleCall_4_1_0 = (RuleCall)cChangesAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ContributionContext:
		//	"contribution" name=ID ("extends" superContributionContexts+=[ContributionContext|QualifiedName] (","
		//	superContributionContexts+=[ContributionContext|QualifiedName])*)? "{" (metaData+=Metadata* &
		//	changes+=ContributionChange*) "}";
		public ParserRule getRule() { return rule; }

		//"contribution" name=ID ("extends" superContributionContexts+=[ContributionContext|QualifiedName] (","
		//superContributionContexts+=[ContributionContext|QualifiedName])*)? "{" (metaData+=Metadata* &
		//changes+=ContributionChange*) "}"
		public Group getGroup() { return cGroup; }

		//"contribution"
		public Keyword getContributionKeyword_0() { return cContributionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("extends" superContributionContexts+=[ContributionContext|QualifiedName] (","
		//superContributionContexts+=[ContributionContext|QualifiedName])*)?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//superContributionContexts+=[ContributionContext|QualifiedName]
		public Assignment getSuperContributionContextsAssignment_2_1() { return cSuperContributionContextsAssignment_2_1; }

		//[ContributionContext|QualifiedName]
		public CrossReference getSuperContributionContextsContributionContextCrossReference_2_1_0() { return cSuperContributionContextsContributionContextCrossReference_2_1_0; }

		//QualifiedName
		public RuleCall getSuperContributionContextsContributionContextQualifiedNameParserRuleCall_2_1_0_1() { return cSuperContributionContextsContributionContextQualifiedNameParserRuleCall_2_1_0_1; }

		//("," superContributionContexts+=[ContributionContext|QualifiedName])*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//superContributionContexts+=[ContributionContext|QualifiedName]
		public Assignment getSuperContributionContextsAssignment_2_2_1() { return cSuperContributionContextsAssignment_2_2_1; }

		//[ContributionContext|QualifiedName]
		public CrossReference getSuperContributionContextsContributionContextCrossReference_2_2_1_0() { return cSuperContributionContextsContributionContextCrossReference_2_2_1_0; }

		//QualifiedName
		public RuleCall getSuperContributionContextsContributionContextQualifiedNameParserRuleCall_2_2_1_0_1() { return cSuperContributionContextsContributionContextQualifiedNameParserRuleCall_2_2_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//metaData+=Metadata* & changes+=ContributionChange*
		public UnorderedGroup getUnorderedGroup_4() { return cUnorderedGroup_4; }

		//metaData+=Metadata*
		public Assignment getMetaDataAssignment_4_0() { return cMetaDataAssignment_4_0; }

		//Metadata
		public RuleCall getMetaDataMetadataParserRuleCall_4_0_0() { return cMetaDataMetadataParserRuleCall_4_0_0; }

		//changes+=ContributionChange*
		public Assignment getChangesAssignment_4_1() { return cChangesAssignment_4_1; }

		//ContributionChange
		public RuleCall getChangesContributionChangeParserRuleCall_4_1_0() { return cChangesContributionChangeParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ContributionChangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContributionChange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContributionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cContributionContributionEndCrossReference_0_0 = (CrossReference)cContributionAssignment_0.eContents().get(0);
		private final RuleCall cContributionContributionEndQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cContributionContributionEndCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Alternatives cAlternatives_2_0_0 = (Alternatives)cGroup_2_0.eContents().get(0);
		private final Assignment cNewContributionAssignment_2_0_0_0 = (Assignment)cAlternatives_2_0_0.eContents().get(0);
		private final RuleCall cNewContributionContributionTypeEnumRuleCall_2_0_0_0_0 = (RuleCall)cNewContributionAssignment_2_0_0_0.eContents().get(0);
		private final Assignment cNewQuantitativeContributionAssignment_2_0_0_1 = (Assignment)cAlternatives_2_0_0.eContents().get(1);
		private final RuleCall cNewQuantitativeContributionQUALITATIVEVALUETerminalRuleCall_2_0_0_1_0 = (RuleCall)cNewQuantitativeContributionAssignment_2_0_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cContribRangeAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cContribRangeContributionRangeParserRuleCall_2_1_1_0 = (RuleCall)cContribRangeAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//ContributionChange: / *
		//	 *TODO I must give a default value for v, which is 0, to this attribute.
		//	 * 		This can be done through the post processing mechanism in xText 
		//	 * / contribution=[ContributionEnd|QualifiedName] "=" ((newContribution=ContributionType |
		//	newQuantitativeContribution=QUALITATIVEVALUE) ";" | "{" contribRange=ContributionRange "}");
		public ParserRule getRule() { return rule; }

		/// *
		//	 *TODO I must give a default value for v, which is 0, to this attribute.
		//	 * 		This can be done through the post processing mechanism in xText 
		//	 * / contribution=[ContributionEnd|QualifiedName] "=" ((newContribution=ContributionType |
		//newQuantitativeContribution=QUALITATIVEVALUE) ";" | "{" contribRange=ContributionRange "}")
		public Group getGroup() { return cGroup; }

		/// *
		//	 *TODO I must give a default value for v, which is 0, to this attribute.
		//	 * 		This can be done through the post processing mechanism in xText 
		//	 * / contribution=[ContributionEnd|QualifiedName]
		public Assignment getContributionAssignment_0() { return cContributionAssignment_0; }

		//[ContributionEnd|QualifiedName]
		public CrossReference getContributionContributionEndCrossReference_0_0() { return cContributionContributionEndCrossReference_0_0; }

		//QualifiedName
		public RuleCall getContributionContributionEndQualifiedNameParserRuleCall_0_0_1() { return cContributionContributionEndQualifiedNameParserRuleCall_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//(newContribution=ContributionType | newQuantitativeContribution=QUALITATIVEVALUE) ";" | "{"
		//contribRange=ContributionRange "}"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//(newContribution=ContributionType | newQuantitativeContribution=QUALITATIVEVALUE) ";"
		public Group getGroup_2_0() { return cGroup_2_0; }

		//newContribution=ContributionType | newQuantitativeContribution=QUALITATIVEVALUE
		public Alternatives getAlternatives_2_0_0() { return cAlternatives_2_0_0; }

		//newContribution=ContributionType
		public Assignment getNewContributionAssignment_2_0_0_0() { return cNewContributionAssignment_2_0_0_0; }

		//ContributionType
		public RuleCall getNewContributionContributionTypeEnumRuleCall_2_0_0_0_0() { return cNewContributionContributionTypeEnumRuleCall_2_0_0_0_0; }

		//newQuantitativeContribution=QUALITATIVEVALUE
		public Assignment getNewQuantitativeContributionAssignment_2_0_0_1() { return cNewQuantitativeContributionAssignment_2_0_0_1; }

		//QUALITATIVEVALUE
		public RuleCall getNewQuantitativeContributionQUALITATIVEVALUETerminalRuleCall_2_0_0_1_0() { return cNewQuantitativeContributionQUALITATIVEVALUETerminalRuleCall_2_0_0_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2_0_1() { return cSemicolonKeyword_2_0_1; }

		//"{" contribRange=ContributionRange "}"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_1_0() { return cLeftCurlyBracketKeyword_2_1_0; }

		//contribRange=ContributionRange
		public Assignment getContribRangeAssignment_2_1_1() { return cContribRangeAssignment_2_1_1; }

		//ContributionRange
		public RuleCall getContribRangeContributionRangeParserRuleCall_2_1_1_0() { return cContribRangeContributionRangeParserRuleCall_2_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_1_2() { return cRightCurlyBracketKeyword_2_1_2; }
	}

	public class ContributionRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContributionRange");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cStartKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cStartAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cStartQUALITATIVEVALUETerminalRuleCall_0_2_0 = (RuleCall)cStartAssignment_0_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Keyword cEndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cEndAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cEndQUALITATIVEVALUETerminalRuleCall_1_2_0 = (RuleCall)cEndAssignment_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cUnorderedGroup.eContents().get(2);
		private final Keyword cStepKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cStepAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cStepQUALITATIVEVALUETerminalRuleCall_2_2_0 = (RuleCall)cStepAssignment_2_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//ContributionRange:
		//	"start" "=" start=QUALITATIVEVALUE ";" / *
		//	 *TODO I must give a default value, which is 1, to this attribute.
		//	 * 		This can be done through the post processing mechanism in xText 
		//	 * / & "end" "=" end=QUALITATIVEVALUE ";" & ("step" "=" step=QUALITATIVEVALUE ";")?;
		public ParserRule getRule() { return rule; }

		//"start" "=" start=QUALITATIVEVALUE ";" / *
		//	 *TODO I must give a default value, which is 1, to this attribute.
		//	 * 		This can be done through the post processing mechanism in xText 
		//	 * / & "end" "=" end=QUALITATIVEVALUE ";" & ("step" "=" step=QUALITATIVEVALUE ";")?
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//"start" "=" start=QUALITATIVEVALUE ";"
		public Group getGroup_0() { return cGroup_0; }

		//"start"
		public Keyword getStartKeyword_0_0() { return cStartKeyword_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//start=QUALITATIVEVALUE
		public Assignment getStartAssignment_0_2() { return cStartAssignment_0_2; }

		//QUALITATIVEVALUE
		public RuleCall getStartQUALITATIVEVALUETerminalRuleCall_0_2_0() { return cStartQUALITATIVEVALUETerminalRuleCall_0_2_0; }

		//";"
		public Keyword getSemicolonKeyword_0_3() { return cSemicolonKeyword_0_3; }

		//"end" "=" end=QUALITATIVEVALUE ";"
		public Group getGroup_1() { return cGroup_1; }

		//"end"
		public Keyword getEndKeyword_1_0() { return cEndKeyword_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }

		//end=QUALITATIVEVALUE
		public Assignment getEndAssignment_1_2() { return cEndAssignment_1_2; }

		//QUALITATIVEVALUE
		public RuleCall getEndQUALITATIVEVALUETerminalRuleCall_1_2_0() { return cEndQUALITATIVEVALUETerminalRuleCall_1_2_0; }

		//";"
		public Keyword getSemicolonKeyword_1_3() { return cSemicolonKeyword_1_3; }

		//("step" "=" step=QUALITATIVEVALUE ";")?
		public Group getGroup_2() { return cGroup_2; }

		//"step"
		public Keyword getStepKeyword_2_0() { return cStepKeyword_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }

		//step=QUALITATIVEVALUE
		public Assignment getStepAssignment_2_2() { return cStepAssignment_2_2; }

		//QUALITATIVEVALUE
		public RuleCall getStepQUALITATIVEVALUETerminalRuleCall_2_2_0() { return cStepQUALITATIVEVALUETerminalRuleCall_2_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_3() { return cSemicolonKeyword_2_3; }
	}

	public class MetadataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Metadata");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMetadataKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// *
		// * Looks unnecessary
		// * ******************************************************************************************** 
		// * / Metadata:
		//	"metadata" name=ID "=" value=STRING ";";
		public ParserRule getRule() { return rule; }

		//"metadata" name=ID "=" value=STRING ";"
		public Group getGroup() { return cGroup; }

		//"metadata"
		public Keyword getMetadataKeyword_0() { return cMetadataKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=STRING
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_0() { return cValueSTRINGTerminalRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class CommentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContentSTRINGTerminalRuleCall_1_0 = (RuleCall)cContentAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Comment:
		//	"comment" content=STRING ";";
		public ParserRule getRule() { return rule; }

		//"comment" content=STRING ";"
		public Group getGroup() { return cGroup; }

		//"comment"
		public Keyword getCommentKeyword_0() { return cCommentKeyword_0; }

		//content=STRING
		public Assignment getContentAssignment_1() { return cContentAssignment_1; }

		//STRING
		public RuleCall getContentSTRINGTerminalRuleCall_1_0() { return cContentSTRINGTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class IndicatorGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IndicatorGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIndicatorGroupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIncludesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cIndicatorsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cIndicatorsIndicatorCrossReference_3_0 = (CrossReference)cIndicatorsAssignment_3.eContents().get(0);
		private final RuleCall cIndicatorsIndicatorQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cIndicatorsIndicatorCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cIndicatorsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cIndicatorsIndicatorCrossReference_4_1_0 = (CrossReference)cIndicatorsAssignment_4_1.eContents().get(0);
		private final RuleCall cIndicatorsIndicatorQualifiedNameParserRuleCall_4_1_0_1 = (RuleCall)cIndicatorsIndicatorCrossReference_4_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////			('isRedesignCategory' '=' isRedesignCategory=BOOLEAN ';')
		//IndicatorGroup:
		//	"indicatorGroup" name=ID "includes" indicators+=[Indicator|QualifiedName] (","
		//	indicators+=[Indicator|QualifiedName])* ";";
		public ParserRule getRule() { return rule; }

		//"indicatorGroup" name=ID "includes" indicators+=[Indicator|QualifiedName] ("," indicators+=[Indicator|QualifiedName])*
		//";"
		public Group getGroup() { return cGroup; }

		//"indicatorGroup"
		public Keyword getIndicatorGroupKeyword_0() { return cIndicatorGroupKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"includes"
		public Keyword getIncludesKeyword_2() { return cIncludesKeyword_2; }

		//indicators+=[Indicator|QualifiedName]
		public Assignment getIndicatorsAssignment_3() { return cIndicatorsAssignment_3; }

		//[Indicator|QualifiedName]
		public CrossReference getIndicatorsIndicatorCrossReference_3_0() { return cIndicatorsIndicatorCrossReference_3_0; }

		//QualifiedName
		public RuleCall getIndicatorsIndicatorQualifiedNameParserRuleCall_3_0_1() { return cIndicatorsIndicatorQualifiedNameParserRuleCall_3_0_1; }

		//("," indicators+=[Indicator|QualifiedName])*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//indicators+=[Indicator|QualifiedName]
		public Assignment getIndicatorsAssignment_4_1() { return cIndicatorsAssignment_4_1; }

		//[Indicator|QualifiedName]
		public CrossReference getIndicatorsIndicatorCrossReference_4_1_0() { return cIndicatorsIndicatorCrossReference_4_1_0; }

		//QualifiedName
		public RuleCall getIndicatorsIndicatorQualifiedNameParserRuleCall_4_1_0_1() { return cIndicatorsIndicatorQualifiedNameParserRuleCall_4_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	public class ImportanceTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ImportanceType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNoneEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNoneNoneKeyword_0_0 = (Keyword)cNoneEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cHighEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cHighHighKeyword_1_0 = (Keyword)cHighEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMediumEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMediumMediumKeyword_2_0 = (Keyword)cMediumEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLowEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLowLowKeyword_3_0 = (Keyword)cLowEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum ImportanceType:
		//	None="none" | High="high" | Medium="medium" | Low="low";
		public EnumRule getRule() { return rule; }

		//None="none" | High="high" | Medium="medium" | Low="low"
		public Alternatives getAlternatives() { return cAlternatives; }

		//None="none"
		public EnumLiteralDeclaration getNoneEnumLiteralDeclaration_0() { return cNoneEnumLiteralDeclaration_0; }

		//"none"
		public Keyword getNoneNoneKeyword_0_0() { return cNoneNoneKeyword_0_0; }

		//High="high"
		public EnumLiteralDeclaration getHighEnumLiteralDeclaration_1() { return cHighEnumLiteralDeclaration_1; }

		//"high"
		public Keyword getHighHighKeyword_1_0() { return cHighHighKeyword_1_0; }

		//Medium="medium"
		public EnumLiteralDeclaration getMediumEnumLiteralDeclaration_2() { return cMediumEnumLiteralDeclaration_2; }

		//"medium"
		public Keyword getMediumMediumKeyword_2_0() { return cMediumMediumKeyword_2_0; }

		//Low="low"
		public EnumLiteralDeclaration getLowEnumLiteralDeclaration_3() { return cLowEnumLiteralDeclaration_3; }

		//"low"
		public Keyword getLowLowKeyword_3_0() { return cLowLowKeyword_3_0; }
	}

	public class DecompositionTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "DecompositionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAndEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAndAndKeyword_0_0 = (Keyword)cAndEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOrEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOrOrKeyword_1_0 = (Keyword)cOrEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cXorEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cXorXorKeyword_2_0 = (Keyword)cXorEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum DecompositionType:
		//	and | or | xor;
		public EnumRule getRule() { return rule; }

		//and | or | xor
		public Alternatives getAlternatives() { return cAlternatives; }

		//and
		public EnumLiteralDeclaration getAndEnumLiteralDeclaration_0() { return cAndEnumLiteralDeclaration_0; }

		//"and"
		public Keyword getAndAndKeyword_0_0() { return cAndAndKeyword_0_0; }

		//or
		public EnumLiteralDeclaration getOrEnumLiteralDeclaration_1() { return cOrEnumLiteralDeclaration_1; }

		//"or"
		public Keyword getOrOrKeyword_1_0() { return cOrOrKeyword_1_0; }

		//xor
		public EnumLiteralDeclaration getXorEnumLiteralDeclaration_2() { return cXorEnumLiteralDeclaration_2; }

		//"xor"
		public Keyword getXorXorKeyword_2_0() { return cXorXorKeyword_2_0; }
	}

	public class ContributionTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ContributionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cHelpEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cHelpHelpKeyword_0_0 = (Keyword)cHelpEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMakeEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMakeMakeKeyword_1_0 = (Keyword)cMakeEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSomePositiveEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSomePositiveSomePositiveKeyword_2_0 = (Keyword)cSomePositiveEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cUnknownEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cUnknownUnknownKeyword_3_0 = (Keyword)cUnknownEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cSomeNegativeEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cSomeNegativeSomeNegativeKeyword_4_0 = (Keyword)cSomeNegativeEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cHurtEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cHurtHurtKeyword_5_0 = (Keyword)cHurtEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cBreakEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cBreakBreakKeyword_6_0 = (Keyword)cBreakEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum ContributionType:
		//	help | make | somePositive | unknown | someNegative | hurt | break;
		public EnumRule getRule() { return rule; }

		//help | make | somePositive | unknown | someNegative | hurt | break
		public Alternatives getAlternatives() { return cAlternatives; }

		//help
		public EnumLiteralDeclaration getHelpEnumLiteralDeclaration_0() { return cHelpEnumLiteralDeclaration_0; }

		//"help"
		public Keyword getHelpHelpKeyword_0_0() { return cHelpHelpKeyword_0_0; }

		//make
		public EnumLiteralDeclaration getMakeEnumLiteralDeclaration_1() { return cMakeEnumLiteralDeclaration_1; }

		//"make"
		public Keyword getMakeMakeKeyword_1_0() { return cMakeMakeKeyword_1_0; }

		//somePositive
		public EnumLiteralDeclaration getSomePositiveEnumLiteralDeclaration_2() { return cSomePositiveEnumLiteralDeclaration_2; }

		//"somePositive"
		public Keyword getSomePositiveSomePositiveKeyword_2_0() { return cSomePositiveSomePositiveKeyword_2_0; }

		//unknown
		public EnumLiteralDeclaration getUnknownEnumLiteralDeclaration_3() { return cUnknownEnumLiteralDeclaration_3; }

		//"unknown"
		public Keyword getUnknownUnknownKeyword_3_0() { return cUnknownUnknownKeyword_3_0; }

		//someNegative
		public EnumLiteralDeclaration getSomeNegativeEnumLiteralDeclaration_4() { return cSomeNegativeEnumLiteralDeclaration_4; }

		//"someNegative"
		public Keyword getSomeNegativeSomeNegativeKeyword_4_0() { return cSomeNegativeSomeNegativeKeyword_4_0; }

		//hurt
		public EnumLiteralDeclaration getHurtEnumLiteralDeclaration_5() { return cHurtEnumLiteralDeclaration_5; }

		//"hurt"
		public Keyword getHurtHurtKeyword_5_0() { return cHurtHurtKeyword_5_0; }

		//break
		public EnumLiteralDeclaration getBreakEnumLiteralDeclaration_6() { return cBreakEnumLiteralDeclaration_6; }

		//"break"
		public Keyword getBreakBreakKeyword_6_0() { return cBreakBreakKeyword_6_0; }
	}

	public class QualitativeLabelElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "QualitativeLabel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNoneEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNoneNoneKeyword_0_0 = (Keyword)cNoneEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cWeaklyDeniedEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cWeaklyDeniedWeaklyDeniedKeyword_1_0 = (Keyword)cWeaklyDeniedEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cWeaklySatisfiedEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cWeaklySatisfiedWeaklySatisfiedKeyword_2_0 = (Keyword)cWeaklySatisfiedEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSatisfiedEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSatisfiedSatisfiedKeyword_3_0 = (Keyword)cSatisfiedEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cConflictEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cConflictConflictKeyword_4_0 = (Keyword)cConflictEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cUnknownEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cUnknownUnknownKeyword_5_0 = (Keyword)cUnknownEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cDeniedEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cDeniedDeniedKeyword_6_0 = (Keyword)cDeniedEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum QualitativeLabel:
		//	none | weaklyDenied | weaklySatisfied | satisfied | conflict | unknown | denied;
		public EnumRule getRule() { return rule; }

		//none | weaklyDenied | weaklySatisfied | satisfied | conflict | unknown | denied
		public Alternatives getAlternatives() { return cAlternatives; }

		//none
		public EnumLiteralDeclaration getNoneEnumLiteralDeclaration_0() { return cNoneEnumLiteralDeclaration_0; }

		//"none"
		public Keyword getNoneNoneKeyword_0_0() { return cNoneNoneKeyword_0_0; }

		//weaklyDenied
		public EnumLiteralDeclaration getWeaklyDeniedEnumLiteralDeclaration_1() { return cWeaklyDeniedEnumLiteralDeclaration_1; }

		//"weaklyDenied"
		public Keyword getWeaklyDeniedWeaklyDeniedKeyword_1_0() { return cWeaklyDeniedWeaklyDeniedKeyword_1_0; }

		//weaklySatisfied
		public EnumLiteralDeclaration getWeaklySatisfiedEnumLiteralDeclaration_2() { return cWeaklySatisfiedEnumLiteralDeclaration_2; }

		//"weaklySatisfied"
		public Keyword getWeaklySatisfiedWeaklySatisfiedKeyword_2_0() { return cWeaklySatisfiedWeaklySatisfiedKeyword_2_0; }

		//satisfied
		public EnumLiteralDeclaration getSatisfiedEnumLiteralDeclaration_3() { return cSatisfiedEnumLiteralDeclaration_3; }

		//"satisfied"
		public Keyword getSatisfiedSatisfiedKeyword_3_0() { return cSatisfiedSatisfiedKeyword_3_0; }

		//conflict
		public EnumLiteralDeclaration getConflictEnumLiteralDeclaration_4() { return cConflictEnumLiteralDeclaration_4; }

		//"conflict"
		public Keyword getConflictConflictKeyword_4_0() { return cConflictConflictKeyword_4_0; }

		//unknown
		public EnumLiteralDeclaration getUnknownEnumLiteralDeclaration_5() { return cUnknownEnumLiteralDeclaration_5; }

		//"unknown"
		public Keyword getUnknownUnknownKeyword_5_0() { return cUnknownUnknownKeyword_5_0; }

		//denied
		public EnumLiteralDeclaration getDeniedEnumLiteralDeclaration_6() { return cDeniedEnumLiteralDeclaration_6; }

		//"denied"
		public Keyword getDeniedDeniedKeyword_6_0() { return cDeniedDeniedKeyword_6_0; }
	}

	public class ColorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Color");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cWhiteEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cWhiteWhiteKeyword_0_0 = (Keyword)cWhiteEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBlackEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBlackBlackKeyword_1_0 = (Keyword)cBlackEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBlueEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBlueBlueKeyword_2_0 = (Keyword)cBlueEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGreenEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGreenGreenKeyword_3_0 = (Keyword)cGreenEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cCyanEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cCyanCyanKeyword_4_0 = (Keyword)cCyanEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cRedEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cRedRedKeyword_5_0 = (Keyword)cRedEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cPurpleEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cPurplePurpleKeyword_6_0 = (Keyword)cPurpleEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cYellowEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cYellowYellowKeyword_7_0 = (Keyword)cYellowEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cGrayEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cGrayGrayKeyword_8_0 = (Keyword)cGrayEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cLightGrayEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cLightGrayLightGrayKeyword_9_0 = (Keyword)cLightGrayEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cLightBlueEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cLightBlueLightBlueKeyword_10_0 = (Keyword)cLightBlueEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cLightGreenEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cLightGreenLightGreenKeyword_11_0 = (Keyword)cLightGreenEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cLightCrayEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cLightCrayLightCrayKeyword_12_0 = (Keyword)cLightCrayEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cLightRedEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cLightRedLightRedKeyword_13_0 = (Keyword)cLightRedEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cLightPurpleEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cLightPurpleLightPurpleKeyword_14_0 = (Keyword)cLightPurpleEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cLightYellowEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cLightYellowLightYellowKeyword_15_0 = (Keyword)cLightYellowEnumLiteralDeclaration_15.eContents().get(0);
		
		//enum Color:
		//	white | black | blue | green | cyan | red | purple | yellow | gray | lightGray | lightBlue | lightGreen | lightCray |
		//	lightRed | lightPurple | lightYellow;
		public EnumRule getRule() { return rule; }

		//white | black | blue | green | cyan | red | purple | yellow | gray | lightGray | lightBlue | lightGreen | lightCray |
		//lightRed | lightPurple | lightYellow
		public Alternatives getAlternatives() { return cAlternatives; }

		//white
		public EnumLiteralDeclaration getWhiteEnumLiteralDeclaration_0() { return cWhiteEnumLiteralDeclaration_0; }

		//"white"
		public Keyword getWhiteWhiteKeyword_0_0() { return cWhiteWhiteKeyword_0_0; }

		//black
		public EnumLiteralDeclaration getBlackEnumLiteralDeclaration_1() { return cBlackEnumLiteralDeclaration_1; }

		//"black"
		public Keyword getBlackBlackKeyword_1_0() { return cBlackBlackKeyword_1_0; }

		//blue
		public EnumLiteralDeclaration getBlueEnumLiteralDeclaration_2() { return cBlueEnumLiteralDeclaration_2; }

		//"blue"
		public Keyword getBlueBlueKeyword_2_0() { return cBlueBlueKeyword_2_0; }

		//green
		public EnumLiteralDeclaration getGreenEnumLiteralDeclaration_3() { return cGreenEnumLiteralDeclaration_3; }

		//"green"
		public Keyword getGreenGreenKeyword_3_0() { return cGreenGreenKeyword_3_0; }

		//cyan
		public EnumLiteralDeclaration getCyanEnumLiteralDeclaration_4() { return cCyanEnumLiteralDeclaration_4; }

		//"cyan"
		public Keyword getCyanCyanKeyword_4_0() { return cCyanCyanKeyword_4_0; }

		//red
		public EnumLiteralDeclaration getRedEnumLiteralDeclaration_5() { return cRedEnumLiteralDeclaration_5; }

		//"red"
		public Keyword getRedRedKeyword_5_0() { return cRedRedKeyword_5_0; }

		//purple
		public EnumLiteralDeclaration getPurpleEnumLiteralDeclaration_6() { return cPurpleEnumLiteralDeclaration_6; }

		//"purple"
		public Keyword getPurplePurpleKeyword_6_0() { return cPurplePurpleKeyword_6_0; }

		//yellow
		public EnumLiteralDeclaration getYellowEnumLiteralDeclaration_7() { return cYellowEnumLiteralDeclaration_7; }

		//"yellow"
		public Keyword getYellowYellowKeyword_7_0() { return cYellowYellowKeyword_7_0; }

		//gray
		public EnumLiteralDeclaration getGrayEnumLiteralDeclaration_8() { return cGrayEnumLiteralDeclaration_8; }

		//"gray"
		public Keyword getGrayGrayKeyword_8_0() { return cGrayGrayKeyword_8_0; }

		//lightGray
		public EnumLiteralDeclaration getLightGrayEnumLiteralDeclaration_9() { return cLightGrayEnumLiteralDeclaration_9; }

		//"lightGray"
		public Keyword getLightGrayLightGrayKeyword_9_0() { return cLightGrayLightGrayKeyword_9_0; }

		//lightBlue
		public EnumLiteralDeclaration getLightBlueEnumLiteralDeclaration_10() { return cLightBlueEnumLiteralDeclaration_10; }

		//"lightBlue"
		public Keyword getLightBlueLightBlueKeyword_10_0() { return cLightBlueLightBlueKeyword_10_0; }

		//lightGreen
		public EnumLiteralDeclaration getLightGreenEnumLiteralDeclaration_11() { return cLightGreenEnumLiteralDeclaration_11; }

		//"lightGreen"
		public Keyword getLightGreenLightGreenKeyword_11_0() { return cLightGreenLightGreenKeyword_11_0; }

		//lightCray
		public EnumLiteralDeclaration getLightCrayEnumLiteralDeclaration_12() { return cLightCrayEnumLiteralDeclaration_12; }

		//"lightCray"
		public Keyword getLightCrayLightCrayKeyword_12_0() { return cLightCrayLightCrayKeyword_12_0; }

		//lightRed
		public EnumLiteralDeclaration getLightRedEnumLiteralDeclaration_13() { return cLightRedEnumLiteralDeclaration_13; }

		//"lightRed"
		public Keyword getLightRedLightRedKeyword_13_0() { return cLightRedLightRedKeyword_13_0; }

		//lightPurple
		public EnumLiteralDeclaration getLightPurpleEnumLiteralDeclaration_14() { return cLightPurpleEnumLiteralDeclaration_14; }

		//"lightPurple"
		public Keyword getLightPurpleLightPurpleKeyword_14_0() { return cLightPurpleLightPurpleKeyword_14_0; }

		//lightYellow
		public EnumLiteralDeclaration getLightYellowEnumLiteralDeclaration_15() { return cLightYellowEnumLiteralDeclaration_15; }

		//"lightYellow"
		public Keyword getLightYellowLightYellowKeyword_15_0() { return cLightYellowLightYellowKeyword_15_0; }
	}

	public class CriticalityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Criticality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNoneEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNoneNoneKeyword_0_0 = (Keyword)cNoneEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cHighEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cHighHighKeyword_1_0 = (Keyword)cHighEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMediumEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMediumMediumKeyword_2_0 = (Keyword)cMediumEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLowEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLowLowKeyword_3_0 = (Keyword)cLowEnumLiteralDeclaration_3.eContents().get(0);
		
		////Deprecated
		//enum Criticality:
		//	None | High | Medium | Low;
		public EnumRule getRule() { return rule; }

		//None | High | Medium | Low
		public Alternatives getAlternatives() { return cAlternatives; }

		//None
		public EnumLiteralDeclaration getNoneEnumLiteralDeclaration_0() { return cNoneEnumLiteralDeclaration_0; }

		//"None"
		public Keyword getNoneNoneKeyword_0_0() { return cNoneNoneKeyword_0_0; }

		//High
		public EnumLiteralDeclaration getHighEnumLiteralDeclaration_1() { return cHighEnumLiteralDeclaration_1; }

		//"High"
		public Keyword getHighHighKeyword_1_0() { return cHighHighKeyword_1_0; }

		//Medium
		public EnumLiteralDeclaration getMediumEnumLiteralDeclaration_2() { return cMediumEnumLiteralDeclaration_2; }

		//"Medium"
		public Keyword getMediumMediumKeyword_2_0() { return cMediumMediumKeyword_2_0; }

		//Low
		public EnumLiteralDeclaration getLowEnumLiteralDeclaration_3() { return cLowEnumLiteralDeclaration_3; }

		//"Low"
		public Keyword getLowLowKeyword_3_0() { return cLowLowKeyword_3_0; }
	}

	public class PriorityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Priority");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNoneEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNoneNoneKeyword_0_0 = (Keyword)cNoneEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cHighEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cHighHighKeyword_1_0 = (Keyword)cHighEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMediumEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMediumMediumKeyword_2_0 = (Keyword)cMediumEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLowEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLowLowKeyword_3_0 = (Keyword)cLowEnumLiteralDeclaration_3.eContents().get(0);
		
		////Deprecated
		//enum Priority:
		//	None | High | Medium | Low;
		public EnumRule getRule() { return rule; }

		//None | High | Medium | Low
		public Alternatives getAlternatives() { return cAlternatives; }

		//None
		public EnumLiteralDeclaration getNoneEnumLiteralDeclaration_0() { return cNoneEnumLiteralDeclaration_0; }

		//"None"
		public Keyword getNoneNoneKeyword_0_0() { return cNoneNoneKeyword_0_0; }

		//High
		public EnumLiteralDeclaration getHighEnumLiteralDeclaration_1() { return cHighEnumLiteralDeclaration_1; }

		//"High"
		public Keyword getHighHighKeyword_1_0() { return cHighHighKeyword_1_0; }

		//Medium
		public EnumLiteralDeclaration getMediumEnumLiteralDeclaration_2() { return cMediumEnumLiteralDeclaration_2; }

		//"Medium"
		public Keyword getMediumMediumKeyword_2_0() { return cMediumMediumKeyword_2_0; }

		//Low
		public EnumLiteralDeclaration getLowEnumLiteralDeclaration_3() { return cLowEnumLiteralDeclaration_3; }

		//"Low"
		public Keyword getLowLowKeyword_3_0() { return cLowLowKeyword_3_0; }
	}

	public class BooleanElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Boolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFalseEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFalseFalseKeyword_0_0 = (Keyword)cFalseEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTrueEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTrueTrueKeyword_1_0 = (Keyword)cTrueEnumLiteralDeclaration_1.eContents().get(0);
		
		////Terminals
		//enum Boolean:
		//	false | true;
		public EnumRule getRule() { return rule; }

		//false | true
		public Alternatives getAlternatives() { return cAlternatives; }

		//false
		public EnumLiteralDeclaration getFalseEnumLiteralDeclaration_0() { return cFalseEnumLiteralDeclaration_0; }

		//"false"
		public Keyword getFalseFalseKeyword_0_0() { return cFalseFalseKeyword_0_0; }

		//true
		public EnumLiteralDeclaration getTrueEnumLiteralDeclaration_1() { return cTrueEnumLiteralDeclaration_1; }

		//"true"
		public Keyword getTrueTrueKeyword_1_0() { return cTrueTrueKeyword_1_0; }
	}
	
	private final ModelElements pModel;
	private final ElementElements pElement;
	private final GRLBaseElementElements pGRLBaseElement;
	private final GRLElementElements pGRLElement;
	private final SuperIntentionalElementElements pSuperIntentionalElement;
	private final IntentionalElementElements pIntentionalElement;
	private final GRLSpecificationElements pGRLSpecification;
	private final ActorElements pActor;
	private final SoftgoalElements pSoftgoal;
	private final GoalElements pGoal;
	private final TaskElements pTask;
	private final ResourceElements pResource;
	private final IndicatorElements pIndicator;
	private final BeliefElements pBelief;
	private final ElementLinkElements pElementLink;
	private final EndLinkElements pEndLink;
	private final NormalElementLinkElements pNormalElementLink;
	private final NormalLinkElements pNormalLink;
	private final NormalDependencyElements pNormalDependency;
	private final NormalContributionElements pNormalContribution;
	private final NormalDecompositionElements pNormalDecomposition;
	private final InLineElementLinkElements pInLineElementLink;
	private final InLineLinkElements pInLineLink;
	private final InLineDependencyElements pInLineDependency;
	private final InLineContributionElements pInLineContribution;
	private final InLineDecompositionElements pInLineDecomposition;
	private final DecompositionEndElements pDecompositionEnd;
	private final ContributionEndElements pContributionEnd;
	private final DependencyEndElements pDependencyEnd;
	private final LinkTypeElements pLinkType;
	private final StrategyGroupElements pStrategyGroup;
	private final EvaluationStrategyElements pEvaluationStrategy;
	private final EvaluationElements pEvaluation;
	private final EvaluationRangeElements pEvaluationRange;
	private final KPIEvalValueSetElements pKPIEvalValueSet;
	private final KPIQuantitativeEvalValueSetElements pKPIQuantitativeEvalValueSet;
	private final KPIQualitativeEvalValueSetElements pKPIQualitativeEvalValueSet;
	private final QualitativeMappingElements pQualitativeMapping;
	private final MappingElements pMapping;
	private final ContributionGroupElements pContributionGroup;
	private final ContributionContextElements pContributionContext;
	private final ContributionChangeElements pContributionChange;
	private final ContributionRangeElements pContributionRange;
	private final MetadataElements pMetadata;
	private final CommentElements pComment;
	private final IndicatorGroupElements pIndicatorGroup;
	private final ImportanceTypeElements unknownRuleImportanceType;
	private final DecompositionTypeElements unknownRuleDecompositionType;
	private final ContributionTypeElements unknownRuleContributionType;
	private final QualitativeLabelElements unknownRuleQualitativeLabel;
	private final ColorElements unknownRuleColor;
	private final CriticalityElements unknownRuleCriticality;
	private final PriorityElements unknownRulePriority;
	private final BooleanElements unknownRuleBoolean;
	private final QualifiedNameElements pQualifiedName;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tQUALITATIVEVALUE;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TGRLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pElement = new ElementElements();
		this.pGRLBaseElement = new GRLBaseElementElements();
		this.pGRLElement = new GRLElementElements();
		this.pSuperIntentionalElement = new SuperIntentionalElementElements();
		this.pIntentionalElement = new IntentionalElementElements();
		this.pGRLSpecification = new GRLSpecificationElements();
		this.pActor = new ActorElements();
		this.pSoftgoal = new SoftgoalElements();
		this.pGoal = new GoalElements();
		this.pTask = new TaskElements();
		this.pResource = new ResourceElements();
		this.pIndicator = new IndicatorElements();
		this.pBelief = new BeliefElements();
		this.pElementLink = new ElementLinkElements();
		this.pEndLink = new EndLinkElements();
		this.pNormalElementLink = new NormalElementLinkElements();
		this.pNormalLink = new NormalLinkElements();
		this.pNormalDependency = new NormalDependencyElements();
		this.pNormalContribution = new NormalContributionElements();
		this.pNormalDecomposition = new NormalDecompositionElements();
		this.pInLineElementLink = new InLineElementLinkElements();
		this.pInLineLink = new InLineLinkElements();
		this.pInLineDependency = new InLineDependencyElements();
		this.pInLineContribution = new InLineContributionElements();
		this.pInLineDecomposition = new InLineDecompositionElements();
		this.pDecompositionEnd = new DecompositionEndElements();
		this.pContributionEnd = new ContributionEndElements();
		this.pDependencyEnd = new DependencyEndElements();
		this.pLinkType = new LinkTypeElements();
		this.pStrategyGroup = new StrategyGroupElements();
		this.pEvaluationStrategy = new EvaluationStrategyElements();
		this.pEvaluation = new EvaluationElements();
		this.pEvaluationRange = new EvaluationRangeElements();
		this.pKPIEvalValueSet = new KPIEvalValueSetElements();
		this.pKPIQuantitativeEvalValueSet = new KPIQuantitativeEvalValueSetElements();
		this.pKPIQualitativeEvalValueSet = new KPIQualitativeEvalValueSetElements();
		this.pQualitativeMapping = new QualitativeMappingElements();
		this.pMapping = new MappingElements();
		this.pContributionGroup = new ContributionGroupElements();
		this.pContributionContext = new ContributionContextElements();
		this.pContributionChange = new ContributionChangeElements();
		this.pContributionRange = new ContributionRangeElements();
		this.pMetadata = new MetadataElements();
		this.pComment = new CommentElements();
		this.pIndicatorGroup = new IndicatorGroupElements();
		this.unknownRuleImportanceType = new ImportanceTypeElements();
		this.unknownRuleDecompositionType = new DecompositionTypeElements();
		this.unknownRuleContributionType = new ContributionTypeElements();
		this.unknownRuleQualitativeLabel = new QualitativeLabelElements();
		this.unknownRuleColor = new ColorElements();
		this.unknownRuleCriticality = new CriticalityElements();
		this.unknownRulePriority = new PriorityElements();
		this.unknownRuleBoolean = new BooleanElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOUBLE");
		this.tQUALITATIVEVALUE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "QUALITATIVEVALUE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.grl.tgrl.TGRL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	gRLspecifications+=GRLSpecification*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Element:
	//	GRLSpecification | GRLBaseElement;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//GRLBaseElement:
	//	GRLElement | Mapping | InLineElementLink;
	public GRLBaseElementElements getGRLBaseElementAccess() {
		return pGRLBaseElement;
	}
	
	public ParserRule getGRLBaseElementRule() {
		return getGRLBaseElementAccess().getRule();
	}

	//GRLElement:
	//	SuperIntentionalElement | NormalElementLink | Actor | StrategyGroup | IndicatorGroup | EvaluationStrategy |
	//	Evaluation | ContributionGroup | ContributionContext | QualitativeMapping | Metadata | Comment | LinkType;
	public GRLElementElements getGRLElementAccess() {
		return pGRLElement;
	}
	
	public ParserRule getGRLElementRule() {
		return getGRLElementAccess().getRule();
	}

	//SuperIntentionalElement:
	//	IntentionalElement | Belief;
	public SuperIntentionalElementElements getSuperIntentionalElementAccess() {
		return pSuperIntentionalElement;
	}
	
	public ParserRule getSuperIntentionalElementRule() {
		return getSuperIntentionalElementAccess().getRule();
	}

	//IntentionalElement:
	//	Softgoal | Goal | Task | Resource | Indicator;
	public IntentionalElementElements getIntentionalElementAccess() {
		return pIntentionalElement;
	}
	
	public ParserRule getIntentionalElementRule() {
		return getIntentionalElementAccess().getRule();
	}

	//GRLSpecification:
	//	{GRLSpecification} "grl" name=ID? "{" grlElements+=GRLElement* //		(
	//	//			(impactModel=ImpactModel)?
	//	//			(
	//	//				links+=ElementLink | actors+=Actor | intElements+=SuperIntentionalElement | 
	//	//				strategies+=EvaluationStrategy | contributionGroups+=ContributionContextGroup |
	//	//				contributionContexts+=ContributionContext | kpiConv+=KPIConversion	| kpiInformationElements+=KPIInformationElement |
	//	//				kpiModelLinks+=KPIModelLink | indicatorGroup+=IndicatorGroup
	//	//			)*	
	//	//		)
	//	"}";
	public GRLSpecificationElements getGRLSpecificationAccess() {
		return pGRLSpecification;
	}
	
	public ParserRule getGRLSpecificationRule() {
		return getGRLSpecificationAccess().getRule();
	}

	//// *************************************Actor******************************************
	//Actor:
	//	"actor" name=ID (";" | "{" (("name" "=" label=STRING ";")? / *
	//			 *TODO I must give a default value for importanceQuantitative, which is zero, to this attribute.
	//			 * 		This can be done through the post processing mechanism in xText 
	//			 * / & ("importance" "=" (importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE) ";")? & ("description"
	//	"=" description=STRING ";")? & metaData+=Metadata* & ("color" "=" fillColor=Color ";")? &
	//	(elemets+=SuperIntentionalElement | elemets+=NormalElementLink)*) "}");
	public ActorElements getActorAccess() {
		return pActor;
	}
	
	public ParserRule getActorRule() {
		return getActorAccess().getRule();
	}

	//// *************************************IntentionalElement******************************************
	//Softgoal:
	//	"softGoal" name=ID (";" | "{" (("name" "=" label=STRING ";")? / *
	//				 *TODO I must give a default value for importanceQuantitative, which is zero, to this attribute.
	//				 * 		This can be done through the post processing mechanism in xText 
	//				 * / & ("description" "=" description=STRING ";")? & ("decompositionType" "=" decompositionType=DecompositionType
	//	";")? & ("importance" "=" (importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE) ";")? &
	//	metaData+=Metadata* & ("color" "=" fillColor=Color ";")? & elementLinks+=InLineElementLink*) "}");
	public SoftgoalElements getSoftgoalAccess() {
		return pSoftgoal;
	}
	
	public ParserRule getSoftgoalRule() {
		return getSoftgoalAccess().getRule();
	}

	//Goal:
	//	"goal" name=ID (";" | "{" (("name" "=" label=STRING ";")? / *
	//			 *TODO I must give a default value for importanceQuantitative, which is zero, to this attribute.
	//			 * 		This can be done through the post processing mechanism in xText 
	//			 * / & ("description" "=" description=STRING ";")? & ("decompositionType" "=" decompositionType=DecompositionType
	//	";")? & ("importance" "=" (importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE) ";")? &
	//	metaData+=Metadata* & ("color" "=" fillColor=Color ";")? & elementLinks+=InLineElementLink*) "}");
	public GoalElements getGoalAccess() {
		return pGoal;
	}
	
	public ParserRule getGoalRule() {
		return getGoalAccess().getRule();
	}

	//Task:
	//	"task" name=ID (";" | "{" (("name" "=" label=STRING ";")? / *
	//				 *TODO I must give a default value for importanceQuantitative, which is zero, to this attribute.
	//				 * 		This can be done through the post processing mechanism in xText 
	//				 * / & ("description" "=" description=STRING ";")? & ("decompositionType" "=" decompositionType=DecompositionType
	//	";")? & ("importance" "=" (importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE) ";")? &
	//	metaData+=Metadata* & ("color" "=" fillColor=Color ";")? & elementLinks+=InLineElementLink*) "}");
	public TaskElements getTaskAccess() {
		return pTask;
	}
	
	public ParserRule getTaskRule() {
		return getTaskAccess().getRule();
	}

	//Resource:
	//	"resource" name=ID (";" | "{" (("name" "=" label=STRING ";")? / *
	//				 *TODO I must give a default value for importanceQuantitative, which is zero, to this attribute.
	//				 * 		This can be done through the post processing mechanism in xText 
	//				 * / & ("description" "=" description=STRING ";")? & ("decompositionType" "=" decompositionType=DecompositionType
	//	";")? & ("importance" "=" (importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE) ";")? &
	//	metaData+=Metadata* & ("color" "=" fillColor=Color ";")? & elementLinks+=InLineElementLink*) "}");
	public ResourceElements getResourceAccess() {
		return pResource;
	}
	
	public ParserRule getResourceRule() {
		return getResourceAccess().getRule();
	}

	//Indicator:
	//	"indicator" name=ID (";" | "{" (("name" "=" label=STRING ";")? / *
	//				 *TODO I must give a default value for importanceQuantitative, which is zero, to this attribute.
	//				 * 		This can be done through the post processing mechanism in xText 
	//				 * / & ("description" "=" description=STRING ";")? & ("decompositionType" "=" decompositionType=DecompositionType
	//	";")? & ("importance" "=" (importance=ImportanceType | importanceQuantitative=QUALITATIVEVALUE) ";")? &
	//	metaData+=Metadata* & ("color" "=" fillColor=Color ";")? & elementLinks+=InLineElementLink*) "}");
	public IndicatorElements getIndicatorAccess() {
		return pIndicator;
	}
	
	public ParserRule getIndicatorRule() {
		return getIndicatorAccess().getRule();
	}

	//Belief:
	//	"belief" name=ID (";" | "{" (("name" "=" label=STRING ";")? & metaData+=Metadata* & ("color" "=" fillColor=Color
	//	";")? & ("description" "=" description=STRING ";")?) "}");
	public BeliefElements getBeliefAccess() {
		return pBelief;
	}
	
	public ParserRule getBeliefRule() {
		return getBeliefAccess().getRule();
	}

	//// *******************************************ElementLink*******************************************
	//ElementLink:
	//	NormalElementLink | InLineElementLink;
	public ElementLinkElements getElementLinkAccess() {
		return pElementLink;
	}
	
	public ParserRule getElementLinkRule() {
		return getElementLinkAccess().getRule();
	}

	//EndLink:
	//	DependencyEnd | ContributionEnd | DecompositionEnd;
	public EndLinkElements getEndLinkAccess() {
		return pEndLink;
	}
	
	public ParserRule getEndLinkRule() {
		return getEndLinkAccess().getRule();
	}

	//NormalElementLink:
	//	NormalDecomposition | NormalContribution | NormalDependency | NormalLink;
	public NormalElementLinkElements getNormalElementLinkAccess() {
		return pNormalElementLink;
	}
	
	public ParserRule getNormalElementLinkRule() {
		return getNormalElementLinkAccess().getRule();
	}

	//NormalLink: //	src = [GRLElement | QualifiedName] type = [LinkType | QualifiedName] dest += [GRLElement | QualifiedName] (',' dest += [GRLElement | QualifiedName])* ';'
	//	src=[GRLElement] type=[LinkType] dest+=[GRLElement] ("," dest+=[GRLElement])* ";";
	public NormalLinkElements getNormalLinkAccess() {
		return pNormalLink;
	}
	
	public ParserRule getNormalLinkRule() {
		return getNormalLinkAccess().getRule();
	}

	////Question:
	////A Dependency describes how a source actor definition depends on a destination actor definition (the dependee) for an intentional element or indicator (the dependum).
	//NormalDependency:
	//	src=[SuperIntentionalElement|QualifiedName] "dependsOn" dest+=DependencyEnd ("," dest+=DependencyEnd)* ";";
	public NormalDependencyElements getNormalDependencyAccess() {
		return pNormalDependency;
	}
	
	public ParserRule getNormalDependencyRule() {
		return getNormalDependencyAccess().getRule();
	}

	/// *
	//			 *TODO I must give a default value, which is 25, to this attribute.
	//			 * 		This can be done through the post processing mechanism in xText 
	//			 * / //			('quantitativeContribution' '=' quantitativeContribution=QUALITATIVEVALUE ';')?&
	////			('correlation' '=' correlation=BOOLEAN ';')?&
	//NormalContribution:
	//	src=[SuperIntentionalElement|QualifiedName] "contributesTo" dest+=ContributionEnd ("," dest+=ContributionEnd)* ";";
	public NormalContributionElements getNormalContributionAccess() {
		return pNormalContribution;
	}
	
	public ParserRule getNormalContributionRule() {
		return getNormalContributionAccess().getRule();
	}

	//NormalDecomposition:
	//	src=[SuperIntentionalElement|QualifiedName] "decomposedBy" dest+=DecompositionEnd ("," dest+=DecompositionEnd)* ";";
	public NormalDecompositionElements getNormalDecompositionAccess() {
		return pNormalDecomposition;
	}
	
	public ParserRule getNormalDecompositionRule() {
		return getNormalDecompositionAccess().getRule();
	}

	//InLineElementLink:
	//	InLineDecomposition | InLineContribution | InLineDependency | InLineLink;
	public InLineElementLinkElements getInLineElementLinkAccess() {
		return pInLineElementLink;
	}
	
	public ParserRule getInLineElementLinkRule() {
		return getInLineElementLinkAccess().getRule();
	}

	//InLineLink:
	//	type=[LinkType|QualifiedName] dest+=[GRLElement|QualifiedName] ("," dest+=[GRLElement|QualifiedName])* ";";
	public InLineLinkElements getInLineLinkAccess() {
		return pInLineLink;
	}
	
	public ParserRule getInLineLinkRule() {
		return getInLineLinkAccess().getRule();
	}

	//InLineDependency:
	//	"dependsOn" dest+=DependencyEnd ("," dest+=DependencyEnd)* ";";
	public InLineDependencyElements getInLineDependencyAccess() {
		return pInLineDependency;
	}
	
	public ParserRule getInLineDependencyRule() {
		return getInLineDependencyAccess().getRule();
	}

	//InLineContribution:
	//	"contributesTo" dest+=ContributionEnd ("," dest+=ContributionEnd)* ";";
	public InLineContributionElements getInLineContributionAccess() {
		return pInLineContribution;
	}
	
	public ParserRule getInLineContributionRule() {
		return getInLineContributionAccess().getRule();
	}

	//InLineDecomposition:
	//	"decomposedBy" dest+=DecompositionEnd ("," dest+=DecompositionEnd)* ";";
	public InLineDecompositionElements getInLineDecompositionAccess() {
		return pInLineDecomposition;
	}
	
	public ParserRule getInLineDecompositionRule() {
		return getInLineDecompositionAccess().getRule();
	}

	//DecompositionEnd:
	//	{DecompositionEnd} destName=[SuperIntentionalElement|QualifiedName] ("{" description=STRING? "}")?;
	public DecompositionEndElements getDecompositionEndAccess() {
		return pDecompositionEnd;
	}
	
	public ParserRule getDecompositionEndRule() {
		return getDecompositionEndAccess().getRule();
	}

	//ContributionEnd:
	//	{ContributionEnd} destName=[SuperIntentionalElement|QualifiedName] ("{" (("name" "=" name=ID ";")? &
	//	((contribution=ContributionType | quantitativeContribution=QUALITATIVEVALUE) ";")?) "}")?;
	public ContributionEndElements getContributionEndAccess() {
		return pContributionEnd;
	}
	
	public ParserRule getContributionEndRule() {
		return getContributionEndAccess().getRule();
	}

	//DependencyEnd:
	//	{DependencyEnd} destName=[SuperIntentionalElement|QualifiedName] ("{" description=STRING? "}")?;
	public DependencyEndElements getDependencyEndAccess() {
		return pDependencyEnd;
	}
	
	public ParserRule getDependencyEndRule() {
		return getDependencyEndAccess().getRule();
	}

	//LinkType:
	//	"link" name=ID ";";
	public LinkTypeElements getLinkTypeAccess() {
		return pLinkType;
	}
	
	public ParserRule getLinkTypeRule() {
		return getLinkTypeAccess().getRule();
	}

	//// *******************************************Strategy*******************************************
	//StrategyGroup:
	//	"strategyGroup" name=ID ("includes" strategies+=[EvaluationStrategy|QualifiedName] (","
	//	strategies+=[EvaluationStrategy|QualifiedName])*)? ";";
	public StrategyGroupElements getStrategyGroupAccess() {
		return pStrategyGroup;
	}
	
	public ParserRule getStrategyGroupRule() {
		return getStrategyGroupAccess().getRule();
	}

	//EvaluationStrategy:
	//	"strategy" name=ID ("extends" superStrategies+=[EvaluationStrategy|QualifiedName] (","
	//	superStrategies+=[EvaluationStrategy|QualifiedName])*)? ("{" (metaData+=Metadata* & evaluations+=Evaluation*) "}" |
	//	";");
	public EvaluationStrategyElements getEvaluationStrategyAccess() {
		return pEvaluationStrategy;
	}
	
	public ParserRule getEvaluationStrategyRule() {
		return getEvaluationStrategyAccess().getRule();
	}

	//Evaluation: / *
	//	 *TODO I must give a default value for evaluation, which is zero, to this attribute.
	//	 * 		This can be done through the post processing mechanism in xText 
	//	 * / intentionalElement=[SuperIntentionalElement|QualifiedName] "=" ((qualitativeEvaluation=QualitativeLabel |
	//	evaluation=QUALITATIVEVALUE) ";" | "{" ((exceeds?="exceeds" ";")? & evalRange=EvaluationRange? &
	//	kpiEvalValueSet=KPIEvalValueSet?) "}");
	public EvaluationElements getEvaluationAccess() {
		return pEvaluation;
	}
	
	public ParserRule getEvaluationRule() {
		return getEvaluationAccess().getRule();
	}

	//EvaluationRange:
	//	("start" "=" start=QUALITATIVEVALUE ";") ("end" "=" end=QUALITATIVEVALUE ";") / *
	//	 *TODO I must give a default value, which is 1, to this attribute.
	//	 * 		This can be done through the post processing mechanism in xText 
	//	 * / ("step" "=" step=QUALITATIVEVALUE ";");
	public EvaluationRangeElements getEvaluationRangeAccess() {
		return pEvaluationRange;
	}
	
	public ParserRule getEvaluationRangeRule() {
		return getEvaluationRangeAccess().getRule();
	}

	//// **************************************************************************************
	//KPIEvalValueSet:
	//	KPIQuantitativeEvalValueSet | KPIQualitativeEvalValueSet;
	public KPIEvalValueSetElements getKPIEvalValueSetAccess() {
		return pKPIEvalValueSet;
	}
	
	public ParserRule getKPIEvalValueSetRule() {
		return getKPIEvalValueSetAccess().getRule();
	}

	//KPIQuantitativeEvalValueSet:
	//	"target" "=" targetValue=DOUBLE ";" / *
	//	 *TODO I must give a default value, which is 0, to this attribute.
	//	 * 		This can be done through the post processing mechanism in xText 
	//	 * / / *
	//	 *TODO I must give a default value, which is 0, to this attribute.
	//	 * 		This can be done through the post processing mechanism in xText 
	//	 * / / *
	//	 *TODO I must give a default value, which is 0, to this attribute.
	//	 * 		This can be done through the post processing mechanism in xText 
	//	 * / / *
	//	 *TODO I must give a default value, which is 0, to this attribute.
	//	 * 		This can be done through the post processing mechanism in xText 
	//	 * / & "threshold" "=" thresholdValue=DOUBLE ";" & "worst" "=" worstValue=DOUBLE ";" & "eval" "=" evaluationValue=DOUBLE
	//	";" & "unit" "=" unit=STRING ";";
	public KPIQuantitativeEvalValueSetElements getKPIQuantitativeEvalValueSetAccess() {
		return pKPIQuantitativeEvalValueSet;
	}
	
	public ParserRule getKPIQuantitativeEvalValueSetRule() {
		return getKPIQuantitativeEvalValueSetAccess().getRule();
	}

	//KPIQualitativeEvalValueSet:
	//	"qualeval" "=" qualitativeEvaluationValue=[Mapping|QualifiedName] ";";
	public KPIQualitativeEvalValueSetElements getKPIQualitativeEvalValueSetAccess() {
		return pKPIQualitativeEvalValueSet;
	}
	
	public ParserRule getKPIQualitativeEvalValueSetRule() {
		return getKPIQualitativeEvalValueSetAccess().getRule();
	}

	//QualitativeMapping:
	//	"qualitativeMapping" name=ID "{" (metaData+=Metadata* & mappings+=Mapping*) "}";
	public QualitativeMappingElements getQualitativeMappingAccess() {
		return pQualitativeMapping;
	}
	
	public ParserRule getQualitativeMappingRule() {
		return getQualitativeMappingAccess().getRule();
	}

	//Mapping:
	//	name=STRING "," evaluation=QUALITATIVEVALUE "," qualitativeEvaluation=QualitativeLabel ("," exceeds=Boolean)? ";";
	public MappingElements getMappingAccess() {
		return pMapping;
	}
	
	public ParserRule getMappingRule() {
		return getMappingAccess().getRule();
	}

	/// ********************************************************************************************
	// * Looks unnecessary 
	// * / ContributionGroup:
	//	"contributionGroup" name=ID "includes" contribs+=[ContributionContext] ("," contribs+=[ContributionContext])* ";";
	public ContributionGroupElements getContributionGroupAccess() {
		return pContributionGroup;
	}
	
	public ParserRule getContributionGroupRule() {
		return getContributionGroupAccess().getRule();
	}

	//ContributionContext:
	//	"contribution" name=ID ("extends" superContributionContexts+=[ContributionContext|QualifiedName] (","
	//	superContributionContexts+=[ContributionContext|QualifiedName])*)? "{" (metaData+=Metadata* &
	//	changes+=ContributionChange*) "}";
	public ContributionContextElements getContributionContextAccess() {
		return pContributionContext;
	}
	
	public ParserRule getContributionContextRule() {
		return getContributionContextAccess().getRule();
	}

	//ContributionChange: / *
	//	 *TODO I must give a default value for v, which is 0, to this attribute.
	//	 * 		This can be done through the post processing mechanism in xText 
	//	 * / contribution=[ContributionEnd|QualifiedName] "=" ((newContribution=ContributionType |
	//	newQuantitativeContribution=QUALITATIVEVALUE) ";" | "{" contribRange=ContributionRange "}");
	public ContributionChangeElements getContributionChangeAccess() {
		return pContributionChange;
	}
	
	public ParserRule getContributionChangeRule() {
		return getContributionChangeAccess().getRule();
	}

	//ContributionRange:
	//	"start" "=" start=QUALITATIVEVALUE ";" / *
	//	 *TODO I must give a default value, which is 1, to this attribute.
	//	 * 		This can be done through the post processing mechanism in xText 
	//	 * / & "end" "=" end=QUALITATIVEVALUE ";" & ("step" "=" step=QUALITATIVEVALUE ";")?;
	public ContributionRangeElements getContributionRangeAccess() {
		return pContributionRange;
	}
	
	public ParserRule getContributionRangeRule() {
		return getContributionRangeAccess().getRule();
	}

	/// *
	// * Looks unnecessary
	// * ******************************************************************************************** 
	// * / Metadata:
	//	"metadata" name=ID "=" value=STRING ";";
	public MetadataElements getMetadataAccess() {
		return pMetadata;
	}
	
	public ParserRule getMetadataRule() {
		return getMetadataAccess().getRule();
	}

	//Comment:
	//	"comment" content=STRING ";";
	public CommentElements getCommentAccess() {
		return pComment;
	}
	
	public ParserRule getCommentRule() {
		return getCommentAccess().getRule();
	}

	////			('isRedesignCategory' '=' isRedesignCategory=BOOLEAN ';')
	//IndicatorGroup:
	//	"indicatorGroup" name=ID "includes" indicators+=[Indicator|QualifiedName] (","
	//	indicators+=[Indicator|QualifiedName])* ";";
	public IndicatorGroupElements getIndicatorGroupAccess() {
		return pIndicatorGroup;
	}
	
	public ParserRule getIndicatorGroupRule() {
		return getIndicatorGroupAccess().getRule();
	}

	//enum ImportanceType:
	//	None="none" | High="high" | Medium="medium" | Low="low";
	public ImportanceTypeElements getImportanceTypeAccess() {
		return unknownRuleImportanceType;
	}
	
	public EnumRule getImportanceTypeRule() {
		return getImportanceTypeAccess().getRule();
	}

	//enum DecompositionType:
	//	and | or | xor;
	public DecompositionTypeElements getDecompositionTypeAccess() {
		return unknownRuleDecompositionType;
	}
	
	public EnumRule getDecompositionTypeRule() {
		return getDecompositionTypeAccess().getRule();
	}

	//enum ContributionType:
	//	help | make | somePositive | unknown | someNegative | hurt | break;
	public ContributionTypeElements getContributionTypeAccess() {
		return unknownRuleContributionType;
	}
	
	public EnumRule getContributionTypeRule() {
		return getContributionTypeAccess().getRule();
	}

	//enum QualitativeLabel:
	//	none | weaklyDenied | weaklySatisfied | satisfied | conflict | unknown | denied;
	public QualitativeLabelElements getQualitativeLabelAccess() {
		return unknownRuleQualitativeLabel;
	}
	
	public EnumRule getQualitativeLabelRule() {
		return getQualitativeLabelAccess().getRule();
	}

	//enum Color:
	//	white | black | blue | green | cyan | red | purple | yellow | gray | lightGray | lightBlue | lightGreen | lightCray |
	//	lightRed | lightPurple | lightYellow;
	public ColorElements getColorAccess() {
		return unknownRuleColor;
	}
	
	public EnumRule getColorRule() {
		return getColorAccess().getRule();
	}

	////Deprecated
	//enum Criticality:
	//	None | High | Medium | Low;
	public CriticalityElements getCriticalityAccess() {
		return unknownRuleCriticality;
	}
	
	public EnumRule getCriticalityRule() {
		return getCriticalityAccess().getRule();
	}

	////Deprecated
	//enum Priority:
	//	None | High | Medium | Low;
	public PriorityElements getPriorityAccess() {
		return unknownRulePriority;
	}
	
	public EnumRule getPriorityRule() {
		return getPriorityAccess().getRule();
	}

	////Terminals
	//enum Boolean:
	//	false | true;
	public BooleanElements getBooleanAccess() {
		return unknownRuleBoolean;
	}
	
	public EnumRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal DOUBLE returns ecore::EDouble:
	//	INT ("." INT+);
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	} 

	/// *
	// * As a guide for feature
	// * / //terminal fragment DIGIT: '0'..'9';
	////terminal fragment HEX_DIGIT: (DIGIT |'a'..'f'|'A'..'F');
	////terminal fragment ALPHANUM: ('a'..'z'|'A'..'Z'|'_'|DIGIT);
	////terminal HEXINT: '0' ('x'|'X') HEX_DIGIT+;
	////terminal OCTINT: '0' ('0'..'7')+;
	////terminal DOUBLE returns ecore::EDouble: DECINT (('.' DIGIT*) | (('.' DIGIT*)? ('E'|'e') ('-'|'+')? DECINT));  // Use terminal to avoid 'e' turning into a keyword
	////terminal DECINT: '0' | ('1'..'9' DIGIT*);
	//terminal QUALITATIVEVALUE:
	//	("-" | "+")? ("0".."9" "0".."9"? | "100");
	public TerminalRule getQUALITATIVEVALUERule() {
		return tQUALITATIVEVALUE;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
