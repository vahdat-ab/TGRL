/*
* generated by Xtext
*/
grammar InternalTGRL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.grl.tgrl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.grl.tgrl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.grl.tgrl.services.TGRLGrammarAccess;

}

@parser::members {

 	private TGRLGrammarAccess grammarAccess;
 	
    public InternalTGRLParser(TokenStream input, TGRLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "URNspec";	
   	}
   	
   	@Override
   	protected TGRLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleURNspec
entryRuleURNspec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getURNspecRule()); }
	 iv_ruleURNspec=ruleURNspec 
	 { $current=$iv_ruleURNspec.current; } 
	 EOF 
;

// Rule URNspec
ruleURNspec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='urnspec' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getURNspecAccess().getUrnspecKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getURNspecAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getURNspecRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getURNspecAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getURNspecAccess().getUrndefURNdefinitionParserRuleCall_3_0()); 
	    }
		lv_urndef_3_0=ruleURNdefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getURNspecRule());
	        }
       		set(
       			$current, 
       			"urndef",
        		lv_urndef_3_0, 
        		"URNdefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getURNspecAccess().getAsdspecASDspecParserRuleCall_4_0()); 
	    }
		lv_asdspec_4_0=ruleASDspec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getURNspecRule());
	        }
       		set(
       			$current, 
       			"asdspec",
        		lv_asdspec_4_0, 
        		"ASDspec");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getURNspecAccess().getGrlspecGRLspecParserRuleCall_5_0()); 
	    }
		lv_grlspec_5_0=ruleGRLspec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getURNspecRule());
	        }
       		set(
       			$current, 
       			"grlspec",
        		lv_grlspec_5_0, 
        		"GRLspec");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getURNspecAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleURNdefinition
entryRuleURNdefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getURNdefinitionRule()); }
	 iv_ruleURNdefinition=ruleURNdefinition 
	 { $current=$iv_ruleURNdefinition.current; } 
	 EOF 
;

// Rule URNdefinition
ruleURNdefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
	otherlv_0='URNdefinition' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getURNdefinitionAccess().getURNdefinitionKeyword());
    }

;





// Entry rule entryRuleASDspec
entryRuleASDspec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getASDspecRule()); }
	 iv_ruleASDspec=ruleASDspec 
	 { $current=$iv_ruleASDspec.current; } 
	 EOF 
;

// Rule ASDspec
ruleASDspec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
	otherlv_0='asdspec' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getASDspecAccess().getAsdspecKeyword());
    }

;





// Entry rule entryRuleGRLspec
entryRuleGRLspec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGRLspecRule()); }
	 iv_ruleGRLspec=ruleGRLspec 
	 { $current=$iv_ruleGRLspec.current; } 
	 EOF 
;

// Rule GRLspec
ruleGRLspec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getGRLspecAccess().getLinksElementLinkParserRuleCall_0_0()); 
	    }
		lv_links_0_0=ruleElementLink		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGRLspecRule());
	        }
       		add(
       			$current, 
       			"links",
        		lv_links_0_0, 
        		"ElementLink");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getGRLspecAccess().getActorsActorParserRuleCall_1_0()); 
	    }
		lv_actors_1_0=ruleActor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGRLspecRule());
	        }
       		add(
       			$current, 
       			"actors",
        		lv_actors_1_0, 
        		"Actor");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getGRLspecAccess().getIntElementsIntentionalElementParserRuleCall_2_0()); 
	    }
		lv_intElements_2_0=ruleIntentionalElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGRLspecRule());
	        }
       		add(
       			$current, 
       			"intElements",
        		lv_intElements_2_0, 
        		"IntentionalElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getGRLspecAccess().getImpactModelImpactModelParserRuleCall_3_0()); 
	    }
		lv_impactModel_3_0=ruleImpactModel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGRLspecRule());
	        }
       		set(
       			$current, 
       			"impactModel",
        		lv_impactModel_3_0, 
        		"ImpactModel");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleElementLink
entryRuleElementLink returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElementLinkRule()); }
	 iv_ruleElementLink=ruleElementLink 
	 { $current=$iv_ruleElementLink.current; } 
	 EOF 
;

// Rule ElementLink
ruleElementLink returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='elementtLink' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getElementLinkAccess().getElementtLinkKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getElementLinkAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElementLinkRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getElementLinkAccess().getLeftCurlyBracketKeyword_2());
    }
	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getElementLinkAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleActor
entryRuleActor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActorRule()); }
	 iv_ruleActor=ruleActor 
	 { $current=$iv_ruleActor.current; } 
	 EOF 
;

// Rule Actor
ruleActor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='actor' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getActorAccess().getActorKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getActorAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getActorAccess().getLeftCurlyBracketKeyword_2());
    }
	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getActorAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleIntentionalElement
entryRuleIntentionalElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntentionalElementRule()); }
	 iv_ruleIntentionalElement=ruleIntentionalElement 
	 { $current=$iv_ruleIntentionalElement.current; } 
	 EOF 
;

// Rule IntentionalElement
ruleIntentionalElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='intentionalElement' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIntentionalElementAccess().getIntentionalElementKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getIntentionalElementAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntentionalElementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIntentionalElementAccess().getLeftCurlyBracketKeyword_2());
    }
	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIntentionalElementAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleImpactModel
entryRuleImpactModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImpactModelRule()); }
	 iv_ruleImpactModel=ruleImpactModel 
	 { $current=$iv_ruleImpactModel.current; } 
	 EOF 
;

// Rule ImpactModel
ruleImpactModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='impactModel' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImpactModelAccess().getImpactModelKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getImpactModelAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImpactModelRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getImpactModelAccess().getLeftCurlyBracketKeyword_2());
    }
	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getImpactModelAccess().getRightCurlyBracketKeyword_3());
    }
)
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


